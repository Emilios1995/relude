[{"href": "./index.html", "title": "Home", "contents": "If you use vscode, Press Windows + Shift + B it will build automatically", "rendered": "If you use <code>vscode</code>, Press <code>Windows + Shift + B</code> it will build automatically", "breadcrumb": "Home"},
{"href": "./index.html#Editor", "title": "Editor", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm run start", "rendered": "<pre><code>npm run start</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Build---Watch", "title": "Build + Watch", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm run build", "rendered": "<pre><code>npm run build</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Build", "title": "Build", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "A Prelude for ReasonML projects", "rendered": "A Prelude for ReasonML projects", "breadcrumb": "Home"},
{"href": "./index.html#Relude", "title": "Relude", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/Validation.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  Errors t t Errors t t Errors t  ", "rendered": "<h4 class='item'>let apply: (\n  <a href=\"./api/Validation.html#type-t\">t</a>('a => 'a, Errors.t('a)),\n  <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t('a))\n) => <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t('a))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Apply.t", "title": "Apply.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Functor.t", "title": "Functor.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-toResult", "title": "toResult", "contents": "toResult t Belt Result t ", "rendered": "<h4 class='item'>let toResult: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => Belt.Result.t('a, 'b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-fromResult", "title": "fromResult", "contents": "fromResult Belt Result t t ", "rendered": "<h4 class='item'>let fromResult: Belt.Result.t('a, 'b) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-flatMapV", "title": "flatMapV", "contents": "This function performs a flatMap-like operation, but if the f fails, all previous errors are discarded.\nValidation is not a traditional Monad, because the point of it is to preserve the errors via a Semigroup.", "rendered": "This function performs a flatMap-like operation, but if the <code>f</code> fails, all previous errors are discarded.\nValidation is not a traditional Monad, because the point of it is to preserve the errors via a Semigroup.", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-flatMapV", "title": "flatMapV", "contents": "flatMapV t t  t  ", "rendered": "<h4 class='item'>let flatMapV: (<a href=\"./api/Validation.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/Validation.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/Validation.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-apply", "title": "apply", "contents": "apply t  t   t   ", "rendered": "<h4 class='item'>let apply: (\n  <a href=\"./api/Validation.html#type-t\">t</a>('a => 'a, 'a),\n  <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a),\n  ('a, 'a) => 'a\n) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-isError", "title": "isError", "contents": "isError t bool ", "rendered": "<h4 class='item'>let isError: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => bool</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-isOk", "title": "isOk", "contents": "isOk t bool ", "rendered": "<h4 class='item'>let isOk: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => bool</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-error", "title": "error", "contents": "error t ", "rendered": "<h4 class='item'>let error: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-ok", "title": "ok", "contents": "ok t ", "rendered": "<h4 class='item'>let ok: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-t", "title": "t", "contents": "Similar to Belt.Result, but has an Applicative instance that collects the errors using a semigroup, rather than fail-fast\nsemantics.", "rendered": "Similar to Belt.Result, but has an Applicative instance that collects the errors using a semigroup, rather than fail-fast\nsemantics.", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'e) = | VOk('a) | VError('e)\n</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html", "title": "Validation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html", "title": "Validation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#Validation", "title": "Validation", "contents": "", "rendered": "", "breadcrumb": "Validation"},
{"href": "./api/Strings.html#value-toNonWhitespace", "title": "toNonWhitespace", "contents": "toNonWhitespace string option string ", "rendered": "<h4 class='item'>let toNonWhitespace: string => option(string)</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isWhitespace", "title": "isWhitespace", "contents": "isWhitespace string bool ", "rendered": "<h4 class='item'>let isWhitespace: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-toNonEmpty", "title": "toNonEmpty", "contents": "toNonEmpty string option string ", "rendered": "<h4 class='item'>let toNonEmpty: string => option(string)</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty string bool ", "rendered": "<h4 class='item'>let isNotEmpty: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty string bool ", "rendered": "<h4 class='item'>let isEmpty: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-trim", "title": "trim", "contents": "trim string string ", "rendered": "<h4 class='item'>let trim: string => string</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-length", "title": "length", "contents": "length string int ", "rendered": "<h4 class='item'>let length: string => int</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html", "title": "Strings", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Strings"},
{"href": "./api/Strings.html", "title": "Strings", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#Strings", "title": "Strings", "contents": "", "rendered": "", "breadcrumb": "Strings"},
{"href": "./api/Result.html#value-toValidationNel", "title": "toValidationNel", "contents": "toValidationNel Belt Result t Relude Validation t Relude NonEmpty List t ", "rendered": "<h4 class='item'>let toValidationNel: Belt.Result.t(\n  'a,\n  'e\n) => Relude.Validation.t('a, Relude.NonEmpty.List.t('e))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromValidation", "title": "fromValidation", "contents": "fromValidation Relude Validation t Belt Result t ", "rendered": "<h4 class='item'>let fromValidation: Relude.Validation.t(\n  'a,\n  'a\n) => Belt.Result.t('a, 'a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toValidation", "title": "toValidation", "contents": "toValidation Belt Result t Relude Validation t ", "rendered": "<h4 class='item'>let toValidation: Belt.Result.t(\n  'a,\n  'a\n) => Relude.Validation.t('a, 'a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toOption", "title": "toOption", "contents": "toOption Belt Result t option ", "rendered": "<h4 class='item'>let toOption: Belt.Result.t('a, 'e) => option('a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromOption", "title": "fromOption", "contents": "fromOption option Belt Result t  ", "rendered": "<h4 class='item'>let fromOption: ('e, option('a)) => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-recover", "title": "recover", "contents": "recover Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let recover: ('a, Belt.Result.t('a, 'e)) => Belt.Result.t(\n  'a,\n  'e\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-alt", "title": "alt", "contents": "alt Belt Result t Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let alt: (\n  Belt.Result.t('a, 'e),\n  Belt.Result.t('a, 'e)\n) => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fold", "title": "fold", "contents": "fold   Belt Result t   ", "rendered": "<h4 class='item'>let fold: ('a => 'c, 'e => 'c, Belt.Result.t('a, 'e)) => 'c</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap", "title": "flatMap", "contents": "flatMap Belt Result t Belt Result t  Belt Result t  ", "rendered": "<h4 class='item'>let flatMap: (\n  Belt.Result.t('a, 'e),\n  'a => Belt.Result.t('b, 'e)\n) => Belt.Result.t('b, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map5", "title": "map5", "contents": "map5      Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x),\n  Belt.Result.t('d, 'x),\n  Belt.Result.t('e, 'x)\n) => Belt.Result.t('f, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map4", "title": "map4", "contents": "map4     Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x),\n  Belt.Result.t('d, 'x)\n) => Belt.Result.t('e, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map3", "title": "map3", "contents": "map3    Belt Result t Belt Result t Belt Result t Belt Result t    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x)\n) => Belt.Result.t('d, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map2", "title": "map2", "contents": "map2   Belt Result t Belt Result t Belt Result t   ", "rendered": "<h4 class='item'>let map2: (\n  ('a, 'b) => 'c,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x)\n) => Belt.Result.t('c, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-apply", "title": "apply", "contents": "apply Belt Result t  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let apply: (\n  Belt.Result.t('a => 'b, 'e),\n  Belt.Result.t('a, 'e)\n) => Belt.Result.t('b, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-tap", "title": "tap", "contents": "tap unit  Belt Result t unit  ", "rendered": "<h4 class='item'>let tap: ('a => unit, Belt.Result.t('a, 'e)) => unit</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-mapError", "title": "mapError", "contents": "mapError  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let mapError: (\n  'e1 => 'e2,\n  Belt.Result.t('a, 'e1)\n) => Belt.Result.t('a, 'e2)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map", "title": "map", "contents": "map  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, Belt.Result.t('a, 'e)) => Belt.Result.t(\n  'b,\n  'e\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-error", "title": "error", "contents": "error Belt Result t ", "rendered": "<h4 class='item'>let error: 'e => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-ok", "title": "ok", "contents": "ok Belt Result t ", "rendered": "<h4 class='item'>let ok: 'a => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-pure", "title": "pure", "contents": "pure Belt Result t ", "rendered": "<h4 class='item'>let pure: 'a => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Result"},
{"href": "./api/Result.html#Result", "title": "Result", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Ordering.html#value-toInt", "title": "toInt", "contents": "toInt BsAbstract Interface ordering int ", "rendered": "<h4 class='item'>let toInt: BsAbstract.Interface.ordering => int</h4>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html#value-fromInt", "title": "fromInt", "contents": "fromInt int BsAbstract Interface ordering ", "rendered": "<h4 class='item'>let fromInt: int => BsAbstract.Interface.ordering</h4>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html", "title": "Ordering", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html", "title": "Ordering", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html#Ordering", "title": "Ordering", "contents": "", "rendered": "", "breadcrumb": "Ordering"},
{"href": "./api/Option.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= option option  option  ", "rendered": "<h4 class='item'>let >>=: (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> option  option option  ", "rendered": "<h4 class='item'>let <*>: (option('a => 'a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  option option  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<|>", "title": "Infix.<|>", "contents": "<|> option option option  ", "rendered": "<h4 class='item'>let <|>: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.|?", "title": "Infix.|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |?: (option('a), 'a) => 'a</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Option"},
{"href": "./api/Option.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-eqM", "title": "eqM", "contents": "eqM option option bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'h),\n  option('a),\n  option('a)\n) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-eq", "title": "eq", "contents": "eq bool   option option bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, option('a), option('a)) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map5", "title": "map5", "contents": "map5      option option option option option option      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  option('a),\n  option('b),\n  option('c),\n  option('d),\n  option('e)\n) => option('f)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map4", "title": "map4", "contents": "map4     option option option option option     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  option('a),\n  option('b),\n  option('c),\n  option('d)\n) => option('e)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map3", "title": "map3", "contents": "map3    option option option option    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  option('a),\n  option('b),\n  option('c)\n) => option('d)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map2", "title": "map2", "contents": "map2   option option option   ", "rendered": "<h4 class='item'>let map2: (\n  ('a, 'b) => 'c,\n  option('a),\n  option('b)\n) => option('c)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flatten", "title": "flatten", "contents": "flatten option option option ", "rendered": "<h4 class='item'>let flatten: option(option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-filter", "title": "filter", "contents": "filter bool  option option  ", "rendered": "<h4 class='item'>let filter: ('a => bool, option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-empty", "title": "empty", "contents": "empty option", "rendered": "<h4 class='item'>let empty: option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-alt", "title": "alt", "contents": "alt option option option  ", "rendered": "<h4 class='item'>let alt: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   option   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, option('a)) => 'b</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap option option  option  ", "rendered": "<h4 class='item'>let flipFlatMap: (option('a), 'a => option('b)) => option(\n  'b\n)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flatMap", "title": "flatMap", "contents": "flatMap option  option option  ", "rendered": "<h4 class='item'>let flatMap: ('a => option('b), option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-pure", "title": "pure", "contents": "pure option ", "rendered": "<h4 class='item'>let pure: 'a => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-apply", "title": "apply", "contents": "apply option  option option  ", "rendered": "<h4 class='item'>let apply: (option('a => 'b), option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map", "title": "map", "contents": "map  option option  ", "rendered": "<h4 class='item'>let map: ('a => 'b, option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-isNone", "title": "isNone", "contents": "isNone option bool ", "rendered": "<h4 class='item'>let isNone: option('a) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-isSome", "title": "isSome", "contents": "isSome option bool ", "rendered": "<h4 class='item'>let isSome: option('a) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-toArray", "title": "toArray", "contents": "toArray option array ", "rendered": "<h4 class='item'>let toArray: option('a) => array('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-toList", "title": "toList", "contents": "toList option list ", "rendered": "<h4 class='item'>let toList: option('a) => list('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-getOrElse", "title": "getOrElse", "contents": "getOrElse option  ", "rendered": "<h4 class='item'>let getOrElse: ('a, option('a)) => 'a</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-fold", "title": "fold", "contents": "fold  option   ", "rendered": "<h4 class='item'>let fold: ('b, 'a => 'b, option('a)) => 'b</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Option"},
{"href": "./api/Option.html", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Option"},
{"href": "./api/Option.html#Option", "title": "Option", "contents": "", "rendered": "", "breadcrumb": "Option"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map_Any.fold_map", "title": "NonEmptyF.Foldable.Fold_Map_Any.fold_map", "contents": "fold_map FoldMapAny t  t FoldMapAny t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapAny.t('a),\n  t('a)\n) => FoldMapAny.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Any", "title": "NonEmptyF.Foldable.Fold_Map_Any", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Any", "title": "NonEmptyF.Foldable.Fold_Map_Any", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map_Plus.fold_map", "title": "NonEmptyF.Foldable.Fold_Map_Plus.fold_map", "contents": "fold_map FoldMapPlus t  t FoldMapPlus t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapPlus.t('a),\n  t('a)\n) => FoldMapPlus.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Plus", "title": "NonEmptyF.Foldable.Fold_Map_Plus", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Plus", "title": "NonEmptyF.Foldable.Fold_Map_Plus", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map.fold_map", "title": "NonEmptyF.Foldable.Fold_Map.fold_map", "contents": "fold_map FoldMapMonoid t  t FoldMapMonoid t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapMonoid.t,\n  t('a)\n) => FoldMapMonoid.t</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map", "title": "NonEmptyF.Foldable.Fold_Map", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map", "title": "NonEmptyF.Foldable.Fold_Map", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.fold_right", "title": "NonEmptyF.Foldable.fold_right", "contents": "fold_right   t   ", "rendered": "<h4 class='item'>let fold_right: (('a, 'a) => 'a, 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.fold_left", "title": "NonEmptyF.Foldable.fold_left", "contents": "fold_left   t   ", "rendered": "<h4 class='item'>let fold_left: (('a, 'a) => 'a, 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Foldable.t", "title": "NonEmptyF.Foldable.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable", "title": "NonEmptyF.Foldable", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable", "title": "NonEmptyF.Foldable", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.flat_map", "title": "NonEmptyF.Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (t('a), 'a => t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.pure", "title": "NonEmptyF.Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.apply", "title": "NonEmptyF.Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.map", "title": "NonEmptyF.Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Monad.t", "title": "NonEmptyF.Monad.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.pure", "title": "NonEmptyF.Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.apply", "title": "NonEmptyF.Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.map", "title": "NonEmptyF.Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Applicative.t", "title": "NonEmptyF.Applicative.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Apply.apply", "title": "NonEmptyF.Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Apply.map", "title": "NonEmptyF.Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Apply.t", "title": "NonEmptyF.Apply.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Functor.map", "title": "NonEmptyF.Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Functor.t", "title": "NonEmptyF.Functor.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Functor", "title": "NonEmptyF.Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Functor", "title": "NonEmptyF.Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.MagmaAny.append", "title": "NonEmptyF.MagmaAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.MagmaAny.t", "title": "NonEmptyF.MagmaAny.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.MagmaAny", "title": "NonEmptyF.MagmaAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.MagmaAny", "title": "NonEmptyF.MagmaAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.SemigroupAny.append", "title": "NonEmptyF.SemigroupAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.SemigroupAny.t", "title": "NonEmptyF.SemigroupAny.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.SemigroupAny", "title": "NonEmptyF.SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.SemigroupAny", "title": "NonEmptyF.SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.flatMap", "title": "NonEmptyF.flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (t('a), 'a => t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.apply", "title": "NonEmptyF.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.map", "title": "NonEmptyF.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.join", "title": "NonEmptyF.join", "contents": "join t t t ", "rendered": "<h4 class='item'>let join: t(t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.flatten", "title": "NonEmptyF.flatten", "contents": "flatten t t t ", "rendered": "<h4 class='item'>let flatten: t(t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.foldRight", "title": "NonEmptyF.foldRight", "contents": "foldRight   t   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, t('a)) => 'b</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.foldLeft", "title": "NonEmptyF.foldLeft", "contents": "foldLeft   t   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, t('a)) => 'b</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.reduceLeft", "title": "NonEmptyF.reduceLeft", "contents": "reduceLeft   t  ", "rendered": "<h4 class='item'>let reduceLeft: (('a, 'a) => 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.concat", "title": "NonEmptyF.concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.tail", "title": "NonEmptyF.tail", "contents": "tail t TailSequence t ", "rendered": "<h4 class='item'>let tail: t('a) => TailSequence.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.head", "title": "NonEmptyF.head", "contents": "head t ", "rendered": "<h4 class='item'>let head: t('a) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.cons", "title": "NonEmptyF.cons", "contents": "cons t t  ", "rendered": "<h4 class='item'>let cons: ('a, t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.toSequence", "title": "NonEmptyF.toSequence", "contents": "toSequence t TailSequence t ", "rendered": "<h4 class='item'>let toSequence: t('a) => TailSequence.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.fromSequence", "title": "NonEmptyF.fromSequence", "contents": "fromSequence TailSequence t option t ", "rendered": "<h4 class='item'>let fromSequence: TailSequence.t('a) => option(t('a))</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.make", "title": "NonEmptyF.make", "contents": "make TailSequence t t  ", "rendered": "<h4 class='item'>let make: ('a, TailSequence.t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.pure", "title": "NonEmptyF.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.length", "title": "NonEmptyF.length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: t('a) => int</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.t", "title": "NonEmptyF.t", "contents": "t TailSequence t", "rendered": "<h4 class='item'>type t('a) = | NonEmpty('a, TailSequence.t('a))\n</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF", "title": "NonEmptyF", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF", "title": "NonEmptyF", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html", "title": "NonEmpty", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html", "title": "NonEmpty", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#NonEmpty", "title": "NonEmpty", "contents": "", "rendered": "", "breadcrumb": "NonEmpty"},
{"href": "./api/MonadEff.html#value-MonadEffEff.liftEff", "title": "MonadEffEff.liftEff", "contents": "liftEff ", "rendered": "<h4 class='item'>let liftEff: 'a => 'a</h4>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#type-MonadEffEff.t", "title": "MonadEffEff.t", "contents": "t Relude Eff t", "rendered": "<h4 class='item'>type t('a) = Relude.Eff.t('a)</h4>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#module-MonadEffEff", "title": "MonadEffEff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#module-MonadEffEff", "title": "MonadEffEff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html", "title": "MonadEff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html", "title": "MonadEff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#MonadEff", "title": "MonadEff", "contents": "", "rendered": "", "breadcrumb": "MonadEff"},
{"href": "./api/MonadAff.html#value-MonadAffAff.liftAff", "title": "MonadAffAff.liftAff", "contents": "liftAff ", "rendered": "<h4 class='item'>let liftAff: 'a => 'a</h4>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#type-MonadAffAff.t", "title": "MonadAffAff.t", "contents": "t Relude Aff t", "rendered": "<h4 class='item'>type t('a, 'e) = Relude.Aff.t('a, 'e)</h4>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#module-MonadAffAff", "title": "MonadAffAff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#module-MonadAffAff", "title": "MonadAffAff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html", "title": "MonadAff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html", "title": "MonadAff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#MonadAff", "title": "MonadAff", "contents": "", "rendered": "", "breadcrumb": "MonadAff"},
{"href": "./api/ListF.html#value-Validation.traverse", "title": "Validation.traverse", "contents": "traverse Belt Result t  list Relude Validation t list Relude NonEmpty List t  ", "rendered": "<h4 class='item'>let traverse: (\n  'a => Belt.Result.t('a, 'a),\n  list('a)\n) => Relude.Validation.t(\n  list('a),\n  Relude.NonEmpty.List.t('a)\n)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Validation", "title": "Validation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Validation", "title": "Validation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Result.traverse", "title": "Result.traverse", "contents": "traverse Belt Result t  list Belt Result t list  ", "rendered": "<h4 class='item'>let traverse: (\n  'a => Belt.Result.t('a, 'a),\n  list('a)\n) => Belt.Result.t(list('a), 'a)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Result", "title": "Result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Result", "title": "Result", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Option.sequence", "title": "Option.sequence", "contents": "sequence list option option list ", "rendered": "<h4 class='item'>let sequence: list(option('a)) => option(list('a))</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Option.traverse", "title": "Option.traverse", "contents": "traverse option  list option list  ", "rendered": "<h4 class='item'>let traverse: ('a => option('a), list('a)) => option(\n  list('a)\n)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Option", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Option", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html", "title": "ListF", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html", "title": "ListF", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#ListF", "title": "ListF", "contents": "", "rendered": "", "breadcrumb": "ListF"},
{"href": "./api/List.html#value-Infix.*>", "title": "Infix.*>", "contents": "*> Apply t Apply t Apply t  ", "rendered": "<h4 class='item'>let *>: (<a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a), <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<*", "title": "Infix.<*", "contents": "<* Apply t Apply t Apply t  ", "rendered": "<h4 class='item'>let <*: (<a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a), <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> BsAbstract List Alternative t  BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <*>: (\n  BsAbstract.List.Alternative.t('a => 'a),\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> BsAbstract List Alternative t  BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <#>: (\n  BsAbstract.List.Alternative.t('a),\n  'a => 'a\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <$>: (\n  'a => 'a,\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<|>", "title": "Infix.<|>", "contents": "<|> BsAbstract List Alternative t BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <|>: (\n  BsAbstract.List.Alternative.t('a),\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< BsAbstract List Monad t  BsAbstract List Monad t  BsAbstract List Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t('a),\n  'a\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> BsAbstract List Monad t  BsAbstract List Monad t  BsAbstract List Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t('a),\n  'a\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< BsAbstract List Monad t  BsAbstract List Monad t BsAbstract List Monad t  ", "rendered": "<h4 class='item'>let =<<: (\n  'a => BsAbstract.List.Monad.t('a),\n  BsAbstract.List.Monad.t('a)\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= BsAbstract List Monad t BsAbstract List Monad t  BsAbstract List Monad t  ", "rendered": "<h4 class='item'>let >>=: (\n  BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t(\n    'a\n  )\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-IsoArray.toArray", "title": "IsoArray.toArray", "contents": "toArray list array ", "rendered": "<h4 class='item'>let toArray: list('a) => array('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-IsoArray.fromArray", "title": "IsoArray.fromArray", "contents": "fromArray array list ", "rendered": "<h4 class='item'>let fromArray: array('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-IsoArray.t", "title": "IsoArray.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-IsoArray", "title": "IsoArray", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-IsoArray", "title": "IsoArray", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.tailOrEmpty", "title": "Sequence.tailOrEmpty", "contents": "tailOrEmpty list list ", "rendered": "<h4 class='item'>let tailOrEmpty: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.tail", "title": "Sequence.tail", "contents": "tail list option list ", "rendered": "<h4 class='item'>let tail: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.head", "title": "Sequence.head", "contents": "head list option ", "rendered": "<h4 class='item'>let head: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.isNotEmpty", "title": "Sequence.isNotEmpty", "contents": "isNotEmpty list bool ", "rendered": "<h4 class='item'>let isNotEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.isEmpty", "title": "Sequence.isEmpty", "contents": "isEmpty list bool ", "rendered": "<h4 class='item'>let isEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.length", "title": "Sequence.length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-Sequence.t", "title": "Sequence.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Sequence", "title": "Sequence", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Sequence", "title": "Sequence", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map5", "title": "map5", "contents": "map5      list list list list list list      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  list('a),\n  list('b),\n  list('c),\n  list('d),\n  list('e)\n) => list('f)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map4", "title": "map4", "contents": "map4     list list list list list     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  list('a),\n  list('b),\n  list('c),\n  list('d)\n) => list('e)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map3", "title": "map3", "contents": "map3    list list list list    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  list('a),\n  list('b),\n  list('c)\n) => list('d)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map2", "title": "map2", "contents": "map2   list list list   ", "rendered": "<h4 class='item'>let map2: (('a, 'b) => 'c, list('a), list('b)) => list('c)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flap", "title": "flap", "contents": "flap list  list  ", "rendered": "<h4 class='item'>let flap: (list('a => 'b), 'a) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-void", "title": "void", "contents": "void list list unit ", "rendered": "<h4 class='item'>let void: list('a) => list(unit)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-MonoidAny.empty", "title": "MonoidAny.empty", "contents": "empty list", "rendered": "<h4 class='item'>let empty: list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-MonoidAny.append", "title": "MonoidAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a), <a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a)) => <a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-MonoidAny.t", "title": "MonoidAny.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-SemigroupAny.append", "title": "SemigroupAny.append", "contents": "append list list list  ", "rendered": "<h4 class='item'>let append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-SemigroupAny.t", "title": "SemigroupAny.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-show", "title": "show", "contents": "show string  list string  ", "rendered": "<h4 class='item'>let show: ('a => string, list('a)) => string</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mkString", "title": "mkString", "contents": "mkString string list string string  ", "rendered": "<h4 class='item'>let mkString: (string, list(string)) => string</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-eqM", "title": "eqM", "contents": "eqM list list bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'g),\n  list('a),\n  list('a)\n) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-eq", "title": "eq", "contents": "eq bool   list list bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, list('a), list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-toArray", "title": "toArray", "contents": "toArray list array ", "rendered": "<h4 class='item'>let toArray: list('a) => array('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-fromArray", "title": "fromArray", "contents": "fromArray array list ", "rendered": "<h4 class='item'>let fromArray: array('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatten", "title": "flatten", "contents": "flatten list list list ", "rendered": "<h4 class='item'>let flatten: list(list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap list  list list  ", "rendered": "<h4 class='item'>let flipFlatMap: ('a => list('b), list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatMap", "title": "flatMap", "contents": "flatMap list list  list  ", "rendered": "<h4 class='item'>let flatMap: (list('a), 'a => list('b)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-apply", "title": "apply", "contents": "apply list  list list  ", "rendered": "<h4 class='item'>let apply: (list('a => 'b), list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex int int unit   list int unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (\n  (int, int) => unit,\n  list(int)\n) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-forEach", "title": "forEach", "contents": "forEach unit  list unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, list('a)) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex int int   list int list  ", "rendered": "<h4 class='item'>let mapWithIndex: ((int, int) => 'b, list(int)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map", "title": "map", "contents": "map  list list  ", "rendered": "<h4 class='item'>let map: ('a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-distinct", "title": "distinct", "contents": "distinct bool   list list  ", "rendered": "<h4 class='item'>let distinct: (('a, 'a) => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-all", "title": "all", "contents": "all bool  list bool  ", "rendered": "<h4 class='item'>let all: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-contains", "title": "contains", "contents": "contains bool   list bool   ", "rendered": "<h4 class='item'>let contains: (('a, 'a) => bool, 'a, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-any", "title": "any", "contents": "any bool  list bool  ", "rendered": "<h4 class='item'>let any: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-reverse", "title": "reverse", "contents": "reverse list list ", "rendered": "<h4 class='item'>let reverse: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-shuffle", "title": "shuffle", "contents": "shuffle list list ", "rendered": "<h4 class='item'>let shuffle: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort", "title": "sort", "contents": "sort BsAbstract Interface ordering   list list  ", "rendered": "<h4 class='item'>let sort: (\n  ('a, 'a) => BsAbstract.Interface.ordering,\n  list('a)\n) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sortWithInt", "title": "sortWithInt", "contents": "sortWithInt int   list list  ", "rendered": "<h4 class='item'>let sortWithInt: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-unzip", "title": "unzip", "contents": "unzip list list list ", "rendered": "<h4 class='item'>let unzip: list(('a, 'b)) => (list('a), list('b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zipWithIndex", "title": "zipWithIndex", "contents": "zipWithIndex list list int ", "rendered": "<h4 class='item'>let zipWithIndex: list('a) => list(('a, int))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zipWith", "title": "zipWith", "contents": "zipWith   list list list   ", "rendered": "<h4 class='item'>let zipWith: (('a, 'b) => 'c, list('a), list('b)) => list(\n  'c\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zip", "title": "zip", "contents": "zip list list list  ", "rendered": "<h4 class='item'>let zip: (list('a), list('b)) => list(('a, 'b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-replicate", "title": "replicate", "contents": "replicate int list list  ", "rendered": "<h4 class='item'>let replicate: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-intersperse", "title": "intersperse", "contents": "intersperse list list  ", "rendered": "<h4 class='item'>let intersperse: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-prependToAll", "title": "prependToAll", "contents": "prependToAll list list  ", "rendered": "<h4 class='item'>let prependToAll: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-splitAt", "title": "splitAt", "contents": "splitAt int list option list list  ", "rendered": "<h4 class='item'>let splitAt: (int, list('a)) => option((list('a), list('a)))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-partition", "title": "partition", "contents": "partition bool  list list list  ", "rendered": "<h4 class='item'>let partition: ('a => bool, list('a)) => (\n  list('a),\n  list('a)\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-findWithIndex", "title": "findWithIndex", "contents": "findWithIndex int bool   list option  ", "rendered": "<h4 class='item'>let findWithIndex: (('a, int) => bool, list('a)) => option(\n  'a\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-find", "title": "find", "contents": "find bool  list option  ", "rendered": "<h4 class='item'>let find: ('a => bool, list('a)) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-filterWithIndex", "title": "filterWithIndex", "contents": "filterWithIndex int bool   list list  ", "rendered": "<h4 class='item'>let filterWithIndex: (('a, int) => bool, list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-filter", "title": "filter", "contents": "filter bool  list list  ", "rendered": "<h4 class='item'>let filter: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-dropWhile", "title": "dropWhile", "contents": "dropWhile bool  list list  ", "rendered": "<h4 class='item'>let dropWhile: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-dropUpTo", "title": "dropUpTo", "contents": "dropUpTo int list list  ", "rendered": "<h4 class='item'>let dropUpTo: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-drop", "title": "drop", "contents": "drop int list option list  ", "rendered": "<h4 class='item'>let drop: (int, list('a)) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-takeWhile", "title": "takeWhile", "contents": "takeWhile bool  list list  ", "rendered": "<h4 class='item'>let takeWhile: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-takeUpTo", "title": "takeUpTo", "contents": "takeUpTo int list list  ", "rendered": "<h4 class='item'>let takeUpTo: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-take", "title": "take", "contents": "take int list option list  ", "rendered": "<h4 class='item'>let take: (int, list('a)) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-last", "title": "last", "contents": "last list option ", "rendered": "<h4 class='item'>let last: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-init", "title": "init", "contents": "init list option list ", "rendered": "<h4 class='item'>let init: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-tailOrEmpty", "title": "tailOrEmpty", "contents": "tailOrEmpty list list ", "rendered": "<h4 class='item'>let tailOrEmpty: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-tail", "title": "tail", "contents": "tail list option list ", "rendered": "<h4 class='item'>let tail: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-head", "title": "head", "contents": "head list option ", "rendered": "<h4 class='item'>let head: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-get", "title": "get", "contents": "get int list option  ", "rendered": "<h4 class='item'>let get: (int, list('a)) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-scanRight", "title": "scanRight", "contents": "scanRight   list list   ", "rendered": "<h4 class='item'>let scanRight: (('a, 'b) => 'b, 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-scanLeft", "title": "scanLeft", "contents": "scanLeft   list list   ", "rendered": "<h4 class='item'>let scanLeft: (('b, 'a) => 'b, 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-foldRight", "title": "foldRight", "contents": "foldRight   list   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, list('a)) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   list   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, list('a)) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-append", "title": "append", "contents": "append list list  ", "rendered": "<h4 class='item'>let append: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-prepend", "title": "prepend", "contents": "prepend list list  ", "rendered": "<h4 class='item'>let prepend: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-uncons", "title": "uncons", "contents": "uncons list option list ", "rendered": "<h4 class='item'>let uncons: list('a) => option(('a, list('a)))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-cons", "title": "cons", "contents": "cons list list  ", "rendered": "<h4 class='item'>let cons: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-concat", "title": "concat", "contents": "concat list list list  ", "rendered": "<h4 class='item'>let concat: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-makeWithIndex", "title": "makeWithIndex", "contents": "makeWithIndex int int  list  ", "rendered": "<h4 class='item'>let makeWithIndex: (int, int => 'a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-repeat", "title": "repeat", "contents": "repeat int list  ", "rendered": "<h4 class='item'>let repeat: (int, 'a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-one", "title": "one", "contents": "one list ", "rendered": "<h4 class='item'>let one: 'a => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-pure", "title": "pure", "contents": "pure list ", "rendered": "<h4 class='item'>let pure: 'a => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-empty", "title": "empty", "contents": "empty list", "rendered": "<h4 class='item'>let empty: list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty list bool ", "rendered": "<h4 class='item'>let isNotEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty list bool ", "rendered": "<h4 class='item'>let isEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-length", "title": "length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#List", "title": "List", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/Interface.html", "title": "Interface", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Interface"},
{"href": "./api/Interface.html", "title": "Interface", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Interface"},
{"href": "./api/Interface.html#Interface", "title": "Interface", "contents": "", "rendered": "", "breadcrumb": "Interface"},
{"href": "./api/Int.html#value-compareAsInt", "title": "compareAsInt", "contents": "compareAsInt int int int  ", "rendered": "<h4 class='item'>let compareAsInt: (int, int) => int</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-compare", "title": "compare", "contents": "compare int int ordering  ", "rendered": "<h4 class='item'>let compare: (int, int) => <a href=\"./api/Int.html#type-ordering\">ordering</a></h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-eq", "title": "eq", "contents": "eq int int bool  ", "rendered": "<h4 class='item'>let eq: (int, int) => bool</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-rangeAsArray", "title": "rangeAsArray", "contents": "rangeAsArray int int array int  ", "rendered": "<h4 class='item'>let rangeAsArray: (int, int) => array(int)</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-rangeAsList", "title": "rangeAsList", "contents": "rangeAsList int int list int  ", "rendered": "<h4 class='item'>let rangeAsList: (int, int) => list(int)</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#type-ordering", "title": "ordering", "contents": "ordering BsAbstract Interface ordering", "rendered": "<h4 class='item'>type ordering = BsAbstract.Interface.ordering</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html", "title": "Int", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Int"},
{"href": "./api/Int.html", "title": "Int", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Int"},
{"href": "./api/Int.html#Int", "title": "Int", "contents": "", "rendered": "", "breadcrumb": "Int"},
{"href": "./api/Function.html#value-Infix.>>", "title": "Infix.>>", "contents": ">>     ", "rendered": "<h4 class='item'>let >>: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-Infix.<<", "title": "Infix.<<", "contents": "<<     ", "rendered": "<h4 class='item'>let <<: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Function"},
{"href": "./api/Function.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flatMap", "title": "flatMap", "contents": "flatMap      ", "rendered": "<h4 class='item'>let flatMap: ('r => 'a, ('a, 'r) => 'b, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-apply", "title": "apply", "contents": "apply      ", "rendered": "<h4 class='item'>let apply: (('r, 'a) => 'b, 'r => 'a, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-map", "title": "map", "contents": "map     ", "rendered": "<h4 class='item'>let map: ('a => 'b, 'r => 'a, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-pure", "title": "pure", "contents": "pure  ", "rendered": "<h4 class='item'>let pure: ('a, 'r) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-andThen", "title": "andThen", "contents": "andThen     ", "rendered": "<h4 class='item'>let andThen: ('a => 'b, 'b => 'c, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flipCompose", "title": "flipCompose", "contents": "flipCompose     ", "rendered": "<h4 class='item'>let flipCompose: ('a => 'b, 'b => 'c, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-compose", "title": "compose", "contents": "compose     ", "rendered": "<h4 class='item'>let compose: ('b => 'c, 'a => 'b, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flip", "title": "flip", "contents": "flip     ", "rendered": "<h4 class='item'>let flip: (('a, 'b) => 'c, 'b, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-const", "title": "const", "contents": "const  ", "rendered": "<h4 class='item'>let const: ('a, 'b) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-id", "title": "id", "contents": "id ", "rendered": "<h4 class='item'>let id: 'a => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-identity", "title": "identity", "contents": "identity ", "rendered": "<h4 class='item'>let identity: 'a => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html", "title": "Function", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Function"},
{"href": "./api/Function.html", "title": "Function", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Function"},
{"href": "./api/Function.html#Function", "title": "Function", "contents": "", "rendered": "", "breadcrumb": "Function"},
{"href": "./api/Float.html#value-approximatelyEqual", "title": "approximatelyEqual", "contents": "approximatelyEqual float float float bool tolerance  ", "rendered": "<h4 class='item'>let approximatelyEqual: (\n  ~tolerance: float,\n  float,\n  float\n) => bool</h4>", "breadcrumb": "Float"},
{"href": "./api/Float.html", "title": "Float", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Float"},
{"href": "./api/Float.html", "title": "Float", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Float"},
{"href": "./api/Float.html#Float", "title": "Float", "contents": "", "rendered": "", "breadcrumb": "Float"},
{"href": "./api/Eff.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a\n) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a\n) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), 'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a => 'a), <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), 'a => 'a) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/Eff.html#type-t\">t</a>('a), 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Monad.t", "title": "Monad.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-t\">t</a>('a => 'a), <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Apply.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Apply.t", "title": "Apply.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Functor.t", "title": "Functor.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Eff.html#type-t\">t</a>('a), 'a => <a href=\"./api/Eff.html#type-t\">t</a>('b)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-attemptJS", "title": "attemptJS", "contents": "attemptJS t t Belt Result t Js Exn t ", "rendered": "<h4 class='item'>let attemptJS: <a href=\"./api/Eff.html#type-t\">t</a>('a) => <a href=\"./api/Eff.html#type-t\">t</a>(Belt.Result.t('a, Js.Exn.t))</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-fromThunk", "title": "fromThunk", "contents": "fromThunk unit  t ", "rendered": "<h4 class='item'>let fromThunk: unit => 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-run", "title": "run", "contents": "Unsafely runs the effect or chain of effects. For Eff, this is the same as\njust calling the effect as a function. If any of the thunks throw an\nexception, the exception will not be caught here.", "rendered": "Unsafely runs the effect or chain of effects. For Eff, this is the same as\njust calling the effect as a function. If any of the thunks throw an\nexception, the exception will not be caught here.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-run", "title": "run", "contents": "run t ", "rendered": "<h4 class='item'>let run: <a href=\"./api/Eff.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "If your action can fail, you should use Aff instead.", "rendered": "If your action can fail, you should use Aff instead.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "console.log is a good example of a function that can be wrapped in Eff - it\nis purely synchronous and is not likely to ever fail with an exception.\nCertain DOM functions might also work well with Eff - the key is that Eff\ncannot deal with errors nor exceptions.", "rendered": "console.log is a good example of a function that can be wrapped in Eff - it\nis purely synchronous and is not likely to ever fail with an exception.\nCertain DOM functions might also work well with Eff - the key is that Eff\ncannot deal with errors nor exceptions.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "Eff should be similar in spirit to the Eff type of purescript (minus the\neffect row) for encoding synchronous effects with no accomodation for errors.", "rendered": "Eff should be similar in spirit to the Eff type of purescript (minus the\neffect row) for encoding synchronous effects with no accomodation for errors.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "This is inspired by bs-effects Effect and John De Goes&#39; basic synchronous\nIO monad described here: http://degoes.net/articles/only-one-io", "rendered": "This is inspired by bs-effects <code>Effect</code> and John De Goes&#39; basic synchronous\nIO monad described here: http://degoes.net/articles/only-one-io", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "It&#39;s basically just a thunk or a lazy function that produces a value.\nLaziness is the key to achieving referential transparency and delaying side\neffects until the monadic chain is run by calling the effect with myEff()\nor equivalently myEff |&gt; Eff.run", "rendered": "It&#39;s basically just a thunk or a lazy function that produces a value.\nLaziness is the key to achieving referential transparency and delaying side\neffects until the monadic chain is run by calling the effect with <code>myEff()</code>\nor equivalently <code>myEff |&gt; Eff.run</code>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "Eff is a pure, lazy, synchronous effect monad that allows for chaining of\nsynchronous effectful functions that are not expected to fail.", "rendered": "Eff is a pure, lazy, synchronous effect monad that allows for chaining of\nsynchronous effectful functions that are not expected to fail.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "t unit ", "rendered": "<h4 class='item'>type t('a) = unit => 'a</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html", "title": "Eff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html", "title": "Eff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#Eff", "title": "Eff", "contents": "", "rendered": "", "breadcrumb": "Eff"},
{"href": "./api/Demo.html#value-log", "title": "log", "contents": "log unit  ", "rendered": "<h4 class='item'>let log: ((module ShowType with type t = 'f), 'a) => unit</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Logger.log", "title": "Logger.log", "contents": "log S t unit ", "rendered": "<h4 class='item'>let log: S.t => unit</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Logger", "title": "Logger", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Logger", "title": "Logger", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-IntShow.show", "title": "IntShow.show", "contents": "show int string ", "rendered": "<h4 class='item'>let show: int => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-IntShow.t", "title": "IntShow.t", "contents": "t int", "rendered": "<h4 class='item'>type t = int</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-IntShow", "title": "IntShow", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-IntShow", "title": "IntShow", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyFunctor.x", "title": "MyFunctor.x", "contents": "x bool", "rendered": "<h4 class='item'>let x: bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyFunctor", "title": "MyFunctor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyFunctor", "title": "MyFunctor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-myModuleAnon", "title": "myModuleAnon", "contents": "myModuleAnon ", "rendered": "<h4 class='item'>let myModuleAnon: (module MyModuleType)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyModule.f2", "title": "MyModule.f2", "contents": "f2 string ", "rendered": "<h4 class='item'>let f2: 'a => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyModule.f1", "title": "MyModule.f1", "contents": "f1 bool ", "rendered": "<h4 class='item'>let f1: 'a => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyModule", "title": "MyModule", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyModule", "title": "MyModule", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-y", "title": "y", "contents": "y string", "rendered": "<h4 class='item'>let y: string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-x", "title": "x", "contents": "x string", "rendered": "<h4 class='item'>let x: string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyPrinter.print", "title": "MyPrinter.print", "contents": "print S t string ", "rendered": "<h4 class='item'>let print: S.t => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyPrinter", "title": "MyPrinter", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyPrinter", "title": "MyPrinter", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Functor.map", "title": "Option.Functor.map", "contents": "map  option option  ", "rendered": "<h4 class='item'>let map: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Functor.t", "title": "Option.Functor.t", "contents": "t option", "rendered": "<h4 class='item'>type t('a) = option('a)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Functor", "title": "Option.Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Functor", "title": "Option.Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Eq.eq", "title": "Option.Eq.eq", "contents": "eq option E t option E t bool  ", "rendered": "<h4 class='item'>let eq: (option(E.t), option(E.t)) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Eq.t", "title": "Option.Eq.t", "contents": "t option E t", "rendered": "<h4 class='item'>type t = option(E.t)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Eq", "title": "Option.Eq", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Eq", "title": "Option.Eq", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Show.show", "title": "Option.Show.show", "contents": "show option S t string ", "rendered": "<h4 class='item'>let show: option(S.t) => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Show.t", "title": "Option.Show.t", "contents": "t option S t", "rendered": "<h4 class='item'>type t = option(S.t)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Show", "title": "Option.Show", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Show", "title": "Option.Show", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Ord.compare", "title": "String.Ord.compare", "contents": "compare  ", "rendered": "<h4 class='item'>let compare: (\n  'a,\n  'a\n) => [&gt; `less_than | `greater_than | `equal_to ]</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Ord.eq", "title": "String.Ord.eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Demo.html#type-String.Ord.t\">t</a>, <a href=\"./api/Demo.html#type-String.Ord.t\">t</a>) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Ord.t", "title": "String.Ord.t", "contents": "t Eq t", "rendered": "<h4 class='item'>type t = <a href=\"./api/Demo.html#module-String.Eq\">Eq</a>.<a href=\"./api/Demo.html#type-String.Eq.t\">t</a></h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Eq.eq", "title": "String.Eq.eq", "contents": "eq bool  ", "rendered": "<h4 class='item'>let eq: ('a, 'a) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Eq.t", "title": "String.Eq.t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Eq", "title": "String.Eq", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Eq", "title": "String.Eq", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Show.show", "title": "String.Show.show", "contents": "show ", "rendered": "<h4 class='item'>let show: 'a => 'a</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Show.t", "title": "String.Show.t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Show", "title": "String.Show", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Show", "title": "String.Show", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String", "title": "String", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String", "title": "String", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.greaterThanOrEqual", "title": "Ordering.greaterThanOrEqual", "contents": "greaterThanOrEqual O t O t bool  ", "rendered": "<h4 class='item'>let greaterThanOrEqual: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.greaterThan", "title": "Ordering.greaterThan", "contents": "greaterThan O t O t bool  ", "rendered": "<h4 class='item'>let greaterThan: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.lessThanOrEqual", "title": "Ordering.lessThanOrEqual", "contents": "lessThanOrEqual O t O t bool  ", "rendered": "<h4 class='item'>let lessThanOrEqual: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.lessThan", "title": "Ordering.lessThan", "contents": "lessThan O t O t bool  ", "rendered": "<h4 class='item'>let lessThan: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Ordering", "title": "Ordering", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Ordering", "title": "Ordering", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-ordering", "title": "ordering", "contents": "ordering ", "rendered": "<h4 class='item'>type ordering = [ `greater_than | `less_than | `equal_to ]</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html", "title": "Demo", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html", "title": "Demo", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#Demo", "title": "Demo", "contents": "", "rendered": "", "breadcrumb": "Demo"},
{"href": "./api/Bool.html#value-ifElse", "title": "ifElse", "contents": "ifElse unit  unit  bool   ", "rendered": "<h4 class='item'>let ifElse: (unit => 'a, unit => 'a, bool) => 'a</h4>", "breadcrumb": "Bool"},
{"href": "./api/Bool.html", "title": "Bool", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bool"},
{"href": "./api/Bool.html", "title": "Bool", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Bool"},
{"href": "./api/Bool.html#Bool", "title": "Bool", "contents": "", "rendered": "", "breadcrumb": "Bool"},
{"href": "./api/AsyncData.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a), 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Monad.t", "title": "Monad.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map5", "title": "map5", "contents": "map5      t t t t t t      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('e, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('f, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map4", "title": "map4", "contents": "map4     t t t t t     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('e, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map3", "title": "map3", "contents": "map3    t t t t    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map2", "title": "map2", "contents": "map2   t t t   ", "rendered": "<h4 class='item'>let map2: (('a, 'b) => 'c, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x), <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x)) => <a href=\"./api/AsyncData.html#type-t\">t</a>(\n  'c,\n  'x\n)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a => 'a, 'a), <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Apply.t", "title": "Apply.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Functor.t", "title": "Functor.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a => 'b, 'e), <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('e1 => 'e2, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e1)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e2)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-failed", "title": "failed", "contents": "failed t ", "rendered": "<h4 class='item'>let failed: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-refreshing", "title": "refreshing", "contents": "refreshing t ", "rendered": "<h4 class='item'>let refreshing: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-loaded", "title": "loaded", "contents": "loaded t ", "rendered": "<h4 class='item'>let loaded: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-loading", "title": "loading", "contents": "loading t", "rendered": "<h4 class='item'>let loading: <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-idle", "title": "idle", "contents": "idle t", "rendered": "<h4 class='item'>let idle: <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'e) = \n  | Idle\n  | Loading\n  | Loaded('a)\n  | Refreshing('a)\n  | Failed('e)\n</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html", "title": "AsyncData", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html", "title": "AsyncData", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#AsyncData", "title": "AsyncData", "contents": "", "rendered": "", "breadcrumb": "AsyncData"},
{"href": "./api/Array.html#value-IsoList.toList", "title": "IsoList.toList", "contents": "toList array list ", "rendered": "<h4 class='item'>let toList: array('a) => list('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-IsoList.fromList", "title": "IsoList.fromList", "contents": "fromList list array ", "rendered": "<h4 class='item'>let fromList: list('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-IsoList.t", "title": "IsoList.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-IsoList", "title": "IsoList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-IsoList", "title": "IsoList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.tailOrEmpty", "title": "Sequence.tailOrEmpty", "contents": "tailOrEmpty array array ", "rendered": "<h4 class='item'>let tailOrEmpty: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.tail", "title": "Sequence.tail", "contents": "tail array option array ", "rendered": "<h4 class='item'>let tail: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.head", "title": "Sequence.head", "contents": "head array option ", "rendered": "<h4 class='item'>let head: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.isNotEmpty", "title": "Sequence.isNotEmpty", "contents": "isNotEmpty array bool ", "rendered": "<h4 class='item'>let isNotEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.isEmpty", "title": "Sequence.isEmpty", "contents": "isEmpty array bool ", "rendered": "<h4 class='item'>let isEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.length", "title": "Sequence.length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-Sequence.t", "title": "Sequence.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-Sequence", "title": "Sequence", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-Sequence", "title": "Sequence", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-MonoidAny.empty", "title": "MonoidAny.empty", "contents": "empty array", "rendered": "<h4 class='item'>let empty: array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-MonoidAny.append", "title": "MonoidAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a), <a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a)) => <a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-MonoidAny.t", "title": "MonoidAny.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-SemigroupAny.append", "title": "SemigroupAny.append", "contents": "append array array array  ", "rendered": "<h4 class='item'>let append: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-SemigroupAny.t", "title": "SemigroupAny.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-show", "title": "show", "contents": "show string  array string  ", "rendered": "<h4 class='item'>let show: ('a => string, array('a)) => string</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mkString", "title": "mkString", "contents": "mkString string array string string  ", "rendered": "<h4 class='item'>let mkString: (string, array(string)) => string</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-eqM", "title": "eqM", "contents": "eqM array array bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'e),\n  array('a),\n  array('a)\n) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-eq", "title": "eq", "contents": "eq bool   array array bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, array('a), array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-toList", "title": "toList", "contents": "toList array list ", "rendered": "<h4 class='item'>let toList: array('a) => list('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fromList", "title": "fromList", "contents": "fromList list array ", "rendered": "<h4 class='item'>let fromList: list('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flatten", "title": "flatten", "contents": "flatten array array array ", "rendered": "<h4 class='item'>let flatten: array(array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap array  array array  ", "rendered": "<h4 class='item'>let flipFlatMap: ('a => array('b), array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flatMap", "title": "flatMap", "contents": "flatMap array array  array  ", "rendered": "<h4 class='item'>let flatMap: (array('a), 'a => array('b)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-apply", "title": "apply", "contents": "apply array  array array  ", "rendered": "<h4 class='item'>let apply: (array('a => 'b), array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex int int unit   array int unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (\n  (int, int) => unit,\n  array(int)\n) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-forEach", "title": "forEach", "contents": "forEach unit  array unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex int int   array int array  ", "rendered": "<h4 class='item'>let mapWithIndex: ((int, int) => 'b, array(int)) => array(\n  'b\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-map", "title": "map", "contents": "map  array array  ", "rendered": "<h4 class='item'>let map: ('a => 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-distinct", "title": "distinct", "contents": "distinct bool   array array  ", "rendered": "<h4 class='item'>let distinct: (('a, 'a) => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-all", "title": "all", "contents": "all bool  array bool  ", "rendered": "<h4 class='item'>let all: ('a => bool, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-contains", "title": "contains", "contents": "contains bool   array bool   ", "rendered": "<h4 class='item'>let contains: (('a, 'a) => bool, 'a, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-any", "title": "any", "contents": "any bool  array bool  ", "rendered": "<h4 class='item'>let any: ('a => bool, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-reverse", "title": "reverse", "contents": "reverse array array ", "rendered": "<h4 class='item'>let reverse: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-shuffleInPlace", "title": "shuffleInPlace", "contents": "shuffleInPlace array array ", "rendered": "<h4 class='item'>let shuffleInPlace: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "sort BsAbstract Interface ordering   array array  ", "rendered": "<h4 class='item'>let sort: (\n  ('a, 'a) => BsAbstract.Interface.ordering,\n  array('a)\n) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sortWithInt", "title": "sortWithInt", "contents": "sortWithInt int   array array  ", "rendered": "<h4 class='item'>let sortWithInt: (('a, 'a) => int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-unzip", "title": "unzip", "contents": "unzip array array array ", "rendered": "<h4 class='item'>let unzip: array(('a, 'b)) => (array('a), array('b))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zipWithIndex", "title": "zipWithIndex", "contents": "zipWithIndex array array int ", "rendered": "<h4 class='item'>let zipWithIndex: array('a) => array(('a, int))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zipWith", "title": "zipWith", "contents": "zipWith   array array array   ", "rendered": "<h4 class='item'>let zipWith: (\n  ('a, 'b) => 'c,\n  array('a),\n  array('b)\n) => array('c)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zip", "title": "zip", "contents": "zip array array array  ", "rendered": "<h4 class='item'>let zip: (array('a), array('b)) => array(('a, 'b))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-replicate", "title": "replicate", "contents": "replicate int array array  ", "rendered": "<h4 class='item'>let replicate: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-intersperse", "title": "intersperse", "contents": "intersperse array array  ", "rendered": "<h4 class='item'>let intersperse: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-prependToAll", "title": "prependToAll", "contents": "prependToAll array array  ", "rendered": "<h4 class='item'>let prependToAll: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-splitAt", "title": "splitAt", "contents": "splitAt int array option array array  ", "rendered": "<h4 class='item'>let splitAt: (int, array('a)) => option(\n  (array('a), array('a))\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-partition", "title": "partition", "contents": "partition bool  array array array  ", "rendered": "<h4 class='item'>let partition: ('a => bool, array('a)) => (\n  array('a),\n  array('a)\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-findWithIndex", "title": "findWithIndex", "contents": "findWithIndex int bool   array option  ", "rendered": "<h4 class='item'>let findWithIndex: (('a, int) => bool, array('a)) => option(\n  'a\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-find", "title": "find", "contents": "find bool  array option  ", "rendered": "<h4 class='item'>let find: ('a => bool, array('a)) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-filterWithIndex", "title": "filterWithIndex", "contents": "filterWithIndex int bool   array array  ", "rendered": "<h4 class='item'>let filterWithIndex: (\n  ('a, int) => bool,\n  array('a)\n) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-filter", "title": "filter", "contents": "filter bool  array array  ", "rendered": "<h4 class='item'>let filter: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-dropWhile", "title": "dropWhile", "contents": "dropWhile bool  array array  ", "rendered": "<h4 class='item'>let dropWhile: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-dropUpTo", "title": "dropUpTo", "contents": "dropUpTo int array array  ", "rendered": "<h4 class='item'>let dropUpTo: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-drop", "title": "drop", "contents": "drop int array option array  ", "rendered": "<h4 class='item'>let drop: (int, array('a)) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-takeWhile", "title": "takeWhile", "contents": "takeWhile bool  array array  ", "rendered": "<h4 class='item'>let takeWhile: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-takeUpTo", "title": "takeUpTo", "contents": "takeUpTo int array array  ", "rendered": "<h4 class='item'>let takeUpTo: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-take", "title": "take", "contents": "take int array option array  ", "rendered": "<h4 class='item'>let take: (int, array('a)) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-last", "title": "last", "contents": "last array option ", "rendered": "<h4 class='item'>let last: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-init", "title": "init", "contents": "init array option array ", "rendered": "<h4 class='item'>let init: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-tailOrEmpty", "title": "tailOrEmpty", "contents": "tailOrEmpty array array ", "rendered": "<h4 class='item'>let tailOrEmpty: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-tail", "title": "tail", "contents": "tail array option array ", "rendered": "<h4 class='item'>let tail: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-head", "title": "head", "contents": "head array option ", "rendered": "<h4 class='item'>let head: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-set", "title": "set", "contents": "set int array bool   ", "rendered": "<h4 class='item'>let set: (int, 'a, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-get", "title": "get", "contents": "get int array option  ", "rendered": "<h4 class='item'>let get: (int, array('a)) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-scanRight", "title": "scanRight", "contents": "scanRight   array array   ", "rendered": "<h4 class='item'>let scanRight: (('a, 'b) => 'b, 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-scanLeft", "title": "scanLeft", "contents": "scanLeft   array array   ", "rendered": "<h4 class='item'>let scanLeft: (('b, 'a) => 'b, 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-foldRight", "title": "foldRight", "contents": "foldRight   array   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, array('a)) => 'b</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   array   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, array('a)) => 'b</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-append", "title": "append", "contents": "append array array  ", "rendered": "<h4 class='item'>let append: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-prepend", "title": "prepend", "contents": "prepend array array  ", "rendered": "<h4 class='item'>let prepend: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-uncons", "title": "uncons", "contents": "uncons array option array ", "rendered": "<h4 class='item'>let uncons: array('a) => option(('a, array('a)))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-cons", "title": "cons", "contents": "cons array array  ", "rendered": "<h4 class='item'>let cons: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-concat", "title": "concat", "contents": "concat array array array  ", "rendered": "<h4 class='item'>let concat: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-makeWithIndex", "title": "makeWithIndex", "contents": "makeWithIndex int int  array  ", "rendered": "<h4 class='item'>let makeWithIndex: (int, int => 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-repeat", "title": "repeat", "contents": "repeat int array  ", "rendered": "<h4 class='item'>let repeat: (int, 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-one", "title": "one", "contents": "one array ", "rendered": "<h4 class='item'>let one: 'a => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-pure", "title": "pure", "contents": "pure array ", "rendered": "<h4 class='item'>let pure: 'a => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-empty", "title": "empty", "contents": "empty array", "rendered": "<h4 class='item'>let empty: array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty array bool ", "rendered": "<h4 class='item'>let isNotEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty array bool ", "rendered": "<h4 class='item'>let isEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#Array", "title": "Array", "contents": "", "rendered": "", "breadcrumb": "Array"},
{"href": "./api/Aff.html#value-InfixJsExn.<=<", "title": "InfixJsExn.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.>=>", "title": "InfixJsExn.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.=<<", "title": "InfixJsExn.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => Monad.t('a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.>>=", "title": "InfixJsExn.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (Monad.t('a), 'a => Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<*>", "title": "InfixJsExn.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (Monad.t('a => 'a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<#>", "title": "InfixJsExn.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (Monad.t('a), 'a => 'a) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<$>", "title": "InfixJsExn.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.flat_map", "title": "InfixJsExn.Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (t('a), 'a => t('b)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.pure", "title": "InfixJsExn.Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.apply", "title": "InfixJsExn.Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.map", "title": "InfixJsExn.Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-InfixJsExn.Monad.t", "title": "InfixJsExn.Monad.t", "contents": "t t JsExnType t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, <a href=\"./api/Aff.html#module-InfixJsExn.JsExnType\">JsExnType</a>.<a href=\"./api/Aff.html#type-InfixJsExn.JsExnType.t\">t</a>)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.Monad", "title": "InfixJsExn.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.Monad", "title": "InfixJsExn.Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-InfixJsExn.JsExnType.t", "title": "InfixJsExn.JsExnType.t", "contents": "t Js Exn t", "rendered": "<h4 class='item'>type t = Js.Exn.t</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.JsExnType", "title": "InfixJsExn.JsExnType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.JsExnType", "title": "InfixJsExn.JsExnType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => Monad.t('a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (Monad.t('a), 'a => Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (Monad.t('a => 'a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (Monad.t('a), 'a => 'a) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/Aff.html#type-t\">t</a>('a, 'a), 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Monad.t", "title": "Monad.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Aff.html#type-t\">t</a>('a => 'a, 'a), <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Apply.t", "title": "Apply.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Functor.t", "title": "Functor.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Aff.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Aff.html#type-t\">t</a>('a => 'b, 'e), <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-voidError", "title": "voidError", "contents": "voidError t t unit ", "rendered": "<h4 class='item'>let voidError: <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e1) => <a href=\"./api/Aff.html#type-t\">t</a>('a, unit)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('e1 => 'e2, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e1)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e2)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromEffAttemptJS", "title": "fromEffAttemptJS", "contents": "fromEffAttemptJS Relude Eff t Belt Result t Js Exn t t Js Exn t ", "rendered": "<h4 class='item'>let fromEffAttemptJS: Relude.Eff.t(\n  Belt.Result.t('a, Js.Exn.t)\n) => <a href=\"./api/Aff.html#type-t\">t</a>('a, Js.Exn.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromEff", "title": "fromEff", "contents": "fromEff Relude Eff t t ", "rendered": "<h4 class='item'>let fromEff: Relude.Eff.t('a) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromResult", "title": "fromResult", "contents": "fromResult Belt Result t t ", "rendered": "<h4 class='item'>let fromResult: Belt.Result.t('a, 'e) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromOption", "title": "fromOption", "contents": "fromOption option t  ", "rendered": "<h4 class='item'>let fromOption: ('e, option('a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-error", "title": "error", "contents": "error t ", "rendered": "<h4 class='item'>let error: 'e => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-ok", "title": "ok", "contents": "ok t ", "rendered": "<h4 class='item'>let ok: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-run", "title": "run", "contents": "run t unit unit ", "rendered": "<h4 class='item'>let run: <a href=\"./api/Aff.html#type-t\">t</a>(unit, 'e) => unit</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-t", "title": "t", "contents": "t Belt Result t Relude Eff t unit  Relude Eff t unit ", "rendered": "<h4 class='item'>type t('a, 'e) = Belt.Result.t('a, 'e) => Relude.Eff.t(\n  unit\n) => Relude.Eff.t(unit)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html", "title": "Aff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html", "title": "Aff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#Aff", "title": "Aff", "contents": "", "rendered": "", "breadcrumb": "Aff"},
{"href": "./api/Validation.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  Errors t t Errors t t Errors t  ", "rendered": "<h4 class='item'>let apply: (\n  <a href=\"./api/Validation.html#type-t\">t</a>('a => 'a, Errors.t('a)),\n  <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t('a))\n) => <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t('a))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Apply.t", "title": "Apply.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-Functor.t", "title": "Functor.t", "contents": "t t Errors t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Validation.html#type-t\">t</a>('a, Errors.t(Error.t))</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-toResult", "title": "toResult", "contents": "toResult t Belt Result t ", "rendered": "<h4 class='item'>let toResult: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => Belt.Result.t('a, 'b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-fromResult", "title": "fromResult", "contents": "fromResult Belt Result t t ", "rendered": "<h4 class='item'>let fromResult: Belt.Result.t('a, 'b) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-flatMapV", "title": "flatMapV", "contents": "This function performs a flatMap-like operation, but if the f fails, all previous errors are discarded.\nValidation is not a traditional Monad, because the point of it is to preserve the errors via a Semigroup.", "rendered": "This function performs a flatMap-like operation, but if the <code>f</code> fails, all previous errors are discarded.\nValidation is not a traditional Monad, because the point of it is to preserve the errors via a Semigroup.", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-flatMapV", "title": "flatMapV", "contents": "flatMapV t t  t  ", "rendered": "<h4 class='item'>let flatMapV: (<a href=\"./api/Validation.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/Validation.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/Validation.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-apply", "title": "apply", "contents": "apply t  t   t   ", "rendered": "<h4 class='item'>let apply: (\n  <a href=\"./api/Validation.html#type-t\">t</a>('a => 'a, 'a),\n  <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a),\n  ('a, 'a) => 'a\n) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-isError", "title": "isError", "contents": "isError t bool ", "rendered": "<h4 class='item'>let isError: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => bool</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-isOk", "title": "isOk", "contents": "isOk t bool ", "rendered": "<h4 class='item'>let isOk: <a href=\"./api/Validation.html#type-t\">t</a>('a, 'b) => bool</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-error", "title": "error", "contents": "error t ", "rendered": "<h4 class='item'>let error: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-ok", "title": "ok", "contents": "ok t ", "rendered": "<h4 class='item'>let ok: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Validation.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-t", "title": "t", "contents": "Similar to Belt.Result, but has an Applicative instance that collects the errors using a semigroup, rather than fail-fast\nsemantics.", "rendered": "Similar to Belt.Result, but has an Applicative instance that collects the errors using a semigroup, rather than fail-fast\nsemantics.", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'e) = | VOk('a) | VError('e)\n</h4>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html", "title": "Validation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Validation"},
{"href": "./api/Validation.html", "title": "Validation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Validation"},
{"href": "./api/Validation.html#Validation", "title": "Validation", "contents": "", "rendered": "", "breadcrumb": "Validation"},
{"href": "./api/Strings.html#value-toNonWhitespace", "title": "toNonWhitespace", "contents": "toNonWhitespace string option string ", "rendered": "<h4 class='item'>let toNonWhitespace: string => option(string)</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isWhitespace", "title": "isWhitespace", "contents": "isWhitespace string bool ", "rendered": "<h4 class='item'>let isWhitespace: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-toNonEmpty", "title": "toNonEmpty", "contents": "toNonEmpty string option string ", "rendered": "<h4 class='item'>let toNonEmpty: string => option(string)</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty string bool ", "rendered": "<h4 class='item'>let isNotEmpty: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty string bool ", "rendered": "<h4 class='item'>let isEmpty: string => bool</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-trim", "title": "trim", "contents": "trim string string ", "rendered": "<h4 class='item'>let trim: string => string</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#value-length", "title": "length", "contents": "length string int ", "rendered": "<h4 class='item'>let length: string => int</h4>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html", "title": "Strings", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Strings"},
{"href": "./api/Strings.html", "title": "Strings", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Strings"},
{"href": "./api/Strings.html#Strings", "title": "Strings", "contents": "", "rendered": "", "breadcrumb": "Strings"},
{"href": "./api/Result.html#value-toValidationNel", "title": "toValidationNel", "contents": "toValidationNel Belt Result t Relude Validation t Relude NonEmpty List t ", "rendered": "<h4 class='item'>let toValidationNel: Belt.Result.t(\n  'a,\n  'e\n) => Relude.Validation.t('a, Relude.NonEmpty.List.t('e))</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromValidation", "title": "fromValidation", "contents": "fromValidation Relude Validation t Belt Result t ", "rendered": "<h4 class='item'>let fromValidation: Relude.Validation.t(\n  'a,\n  'a\n) => Belt.Result.t('a, 'a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toValidation", "title": "toValidation", "contents": "toValidation Belt Result t Relude Validation t ", "rendered": "<h4 class='item'>let toValidation: Belt.Result.t(\n  'a,\n  'a\n) => Relude.Validation.t('a, 'a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-toOption", "title": "toOption", "contents": "toOption Belt Result t option ", "rendered": "<h4 class='item'>let toOption: Belt.Result.t('a, 'e) => option('a)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fromOption", "title": "fromOption", "contents": "fromOption option Belt Result t  ", "rendered": "<h4 class='item'>let fromOption: ('e, option('a)) => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-recover", "title": "recover", "contents": "recover Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let recover: ('a, Belt.Result.t('a, 'e)) => Belt.Result.t(\n  'a,\n  'e\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-alt", "title": "alt", "contents": "alt Belt Result t Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let alt: (\n  Belt.Result.t('a, 'e),\n  Belt.Result.t('a, 'e)\n) => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-fold", "title": "fold", "contents": "fold   Belt Result t   ", "rendered": "<h4 class='item'>let fold: ('a => 'c, 'e => 'c, Belt.Result.t('a, 'e)) => 'c</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-flatMap", "title": "flatMap", "contents": "flatMap Belt Result t Belt Result t  Belt Result t  ", "rendered": "<h4 class='item'>let flatMap: (\n  Belt.Result.t('a, 'e),\n  'a => Belt.Result.t('b, 'e)\n) => Belt.Result.t('b, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map5", "title": "map5", "contents": "map5      Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x),\n  Belt.Result.t('d, 'x),\n  Belt.Result.t('e, 'x)\n) => Belt.Result.t('f, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map4", "title": "map4", "contents": "map4     Belt Result t Belt Result t Belt Result t Belt Result t Belt Result t     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x),\n  Belt.Result.t('d, 'x)\n) => Belt.Result.t('e, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map3", "title": "map3", "contents": "map3    Belt Result t Belt Result t Belt Result t Belt Result t    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x),\n  Belt.Result.t('c, 'x)\n) => Belt.Result.t('d, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map2", "title": "map2", "contents": "map2   Belt Result t Belt Result t Belt Result t   ", "rendered": "<h4 class='item'>let map2: (\n  ('a, 'b) => 'c,\n  Belt.Result.t('a, 'x),\n  Belt.Result.t('b, 'x)\n) => Belt.Result.t('c, 'x)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-apply", "title": "apply", "contents": "apply Belt Result t  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let apply: (\n  Belt.Result.t('a => 'b, 'e),\n  Belt.Result.t('a, 'e)\n) => Belt.Result.t('b, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-tap", "title": "tap", "contents": "tap unit  Belt Result t unit  ", "rendered": "<h4 class='item'>let tap: ('a => unit, Belt.Result.t('a, 'e)) => unit</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-mapError", "title": "mapError", "contents": "mapError  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let mapError: (\n  'e1 => 'e2,\n  Belt.Result.t('a, 'e1)\n) => Belt.Result.t('a, 'e2)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-map", "title": "map", "contents": "map  Belt Result t Belt Result t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, Belt.Result.t('a, 'e)) => Belt.Result.t(\n  'b,\n  'e\n)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-error", "title": "error", "contents": "error Belt Result t ", "rendered": "<h4 class='item'>let error: 'e => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-ok", "title": "ok", "contents": "ok Belt Result t ", "rendered": "<h4 class='item'>let ok: 'a => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html#value-pure", "title": "pure", "contents": "pure Belt Result t ", "rendered": "<h4 class='item'>let pure: 'a => Belt.Result.t('a, 'e)</h4>", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Result"},
{"href": "./api/Result.html", "title": "Result", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Result"},
{"href": "./api/Result.html#Result", "title": "Result", "contents": "", "rendered": "", "breadcrumb": "Result"},
{"href": "./api/Ordering.html#value-toInt", "title": "toInt", "contents": "toInt BsAbstract Interface ordering int ", "rendered": "<h4 class='item'>let toInt: BsAbstract.Interface.ordering => int</h4>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html#value-fromInt", "title": "fromInt", "contents": "fromInt int BsAbstract Interface ordering ", "rendered": "<h4 class='item'>let fromInt: int => BsAbstract.Interface.ordering</h4>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html", "title": "Ordering", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html", "title": "Ordering", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Ordering"},
{"href": "./api/Ordering.html#Ordering", "title": "Ordering", "contents": "", "rendered": "", "breadcrumb": "Ordering"},
{"href": "./api/Option.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= option option  option  ", "rendered": "<h4 class='item'>let >>=: (option('a), 'a => option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> option  option option  ", "rendered": "<h4 class='item'>let <*>: (option('a => 'a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  option option  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.<|>", "title": "Infix.<|>", "contents": "<|> option option option  ", "rendered": "<h4 class='item'>let <|>: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-Infix.|?", "title": "Infix.|?", "contents": "|? option  ", "rendered": "<h4 class='item'>let |?: (option('a), 'a) => 'a</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Option"},
{"href": "./api/Option.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-eqM", "title": "eqM", "contents": "eqM option option bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'd),\n  option('a),\n  option('a)\n) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-eq", "title": "eq", "contents": "eq bool   option option bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, option('a), option('a)) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map5", "title": "map5", "contents": "map5      option option option option option option      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  option('a),\n  option('b),\n  option('c),\n  option('d),\n  option('e)\n) => option('f)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map4", "title": "map4", "contents": "map4     option option option option option     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  option('a),\n  option('b),\n  option('c),\n  option('d)\n) => option('e)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map3", "title": "map3", "contents": "map3    option option option option    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  option('a),\n  option('b),\n  option('c)\n) => option('d)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map2", "title": "map2", "contents": "map2   option option option   ", "rendered": "<h4 class='item'>let map2: (\n  ('a, 'b) => 'c,\n  option('a),\n  option('b)\n) => option('c)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flatten", "title": "flatten", "contents": "flatten option option option ", "rendered": "<h4 class='item'>let flatten: option(option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-filter", "title": "filter", "contents": "filter bool  option option  ", "rendered": "<h4 class='item'>let filter: ('a => bool, option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-empty", "title": "empty", "contents": "empty option", "rendered": "<h4 class='item'>let empty: option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-alt", "title": "alt", "contents": "alt option option option  ", "rendered": "<h4 class='item'>let alt: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   option   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, option('a)) => 'b</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap option option  option  ", "rendered": "<h4 class='item'>let flipFlatMap: (option('a), 'a => option('b)) => option(\n  'b\n)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-flatMap", "title": "flatMap", "contents": "flatMap option  option option  ", "rendered": "<h4 class='item'>let flatMap: ('a => option('b), option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-pure", "title": "pure", "contents": "pure option ", "rendered": "<h4 class='item'>let pure: 'a => option('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-apply", "title": "apply", "contents": "apply option  option option  ", "rendered": "<h4 class='item'>let apply: (option('a => 'b), option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-map", "title": "map", "contents": "map  option option  ", "rendered": "<h4 class='item'>let map: ('a => 'b, option('a)) => option('b)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-isNone", "title": "isNone", "contents": "isNone option bool ", "rendered": "<h4 class='item'>let isNone: option('a) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-isSome", "title": "isSome", "contents": "isSome option bool ", "rendered": "<h4 class='item'>let isSome: option('a) => bool</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-toArray", "title": "toArray", "contents": "toArray option array ", "rendered": "<h4 class='item'>let toArray: option('a) => array('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-toList", "title": "toList", "contents": "toList option list ", "rendered": "<h4 class='item'>let toList: option('a) => list('a)</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-getOrElse", "title": "getOrElse", "contents": "getOrElse option  ", "rendered": "<h4 class='item'>let getOrElse: ('a, option('a)) => 'a</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html#value-fold", "title": "fold", "contents": "fold  option   ", "rendered": "<h4 class='item'>let fold: ('b, 'a => 'b, option('a)) => 'b</h4>", "breadcrumb": "Option"},
{"href": "./api/Option.html", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Option"},
{"href": "./api/Option.html", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Option"},
{"href": "./api/Option.html#Option", "title": "Option", "contents": "", "rendered": "", "breadcrumb": "Option"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map_Any.fold_map", "title": "NonEmptyF.Foldable.Fold_Map_Any.fold_map", "contents": "fold_map FoldMapAny t  t FoldMapAny t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapAny.t('a),\n  t('a)\n) => FoldMapAny.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Any", "title": "NonEmptyF.Foldable.Fold_Map_Any", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Any", "title": "NonEmptyF.Foldable.Fold_Map_Any", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map_Plus.fold_map", "title": "NonEmptyF.Foldable.Fold_Map_Plus.fold_map", "contents": "fold_map FoldMapPlus t  t FoldMapPlus t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapPlus.t('a),\n  t('a)\n) => FoldMapPlus.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Plus", "title": "NonEmptyF.Foldable.Fold_Map_Plus", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map_Plus", "title": "NonEmptyF.Foldable.Fold_Map_Plus", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.Fold_Map.fold_map", "title": "NonEmptyF.Foldable.Fold_Map.fold_map", "contents": "fold_map FoldMapMonoid t  t FoldMapMonoid t  ", "rendered": "<h4 class='item'>let fold_map: (\n  'a => FoldMapMonoid.t,\n  t('a)\n) => FoldMapMonoid.t</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map", "title": "NonEmptyF.Foldable.Fold_Map", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable.Fold_Map", "title": "NonEmptyF.Foldable.Fold_Map", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.fold_right", "title": "NonEmptyF.Foldable.fold_right", "contents": "fold_right   t   ", "rendered": "<h4 class='item'>let fold_right: (('a, 'a) => 'a, 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Foldable.fold_left", "title": "NonEmptyF.Foldable.fold_left", "contents": "fold_left   t   ", "rendered": "<h4 class='item'>let fold_left: (('a, 'a) => 'a, 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Foldable.t", "title": "NonEmptyF.Foldable.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable", "title": "NonEmptyF.Foldable", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Foldable", "title": "NonEmptyF.Foldable", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.flat_map", "title": "NonEmptyF.Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (t('a), 'a => t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.pure", "title": "NonEmptyF.Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.apply", "title": "NonEmptyF.Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Monad.map", "title": "NonEmptyF.Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Monad.t", "title": "NonEmptyF.Monad.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Monad", "title": "NonEmptyF.Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.pure", "title": "NonEmptyF.Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.apply", "title": "NonEmptyF.Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Applicative.map", "title": "NonEmptyF.Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Applicative.t", "title": "NonEmptyF.Applicative.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Applicative", "title": "NonEmptyF.Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Apply.apply", "title": "NonEmptyF.Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Apply.map", "title": "NonEmptyF.Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Apply.t", "title": "NonEmptyF.Apply.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Apply", "title": "NonEmptyF.Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.Functor.map", "title": "NonEmptyF.Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.Functor.t", "title": "NonEmptyF.Functor.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Functor", "title": "NonEmptyF.Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.Functor", "title": "NonEmptyF.Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.MagmaAny.append", "title": "NonEmptyF.MagmaAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.MagmaAny.t", "title": "NonEmptyF.MagmaAny.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.MagmaAny", "title": "NonEmptyF.MagmaAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.MagmaAny", "title": "NonEmptyF.MagmaAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.SemigroupAny.append", "title": "NonEmptyF.SemigroupAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.SemigroupAny.t", "title": "NonEmptyF.SemigroupAny.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.SemigroupAny", "title": "NonEmptyF.SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF.SemigroupAny", "title": "NonEmptyF.SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.flatMap", "title": "NonEmptyF.flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (t('a), 'a => t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.apply", "title": "NonEmptyF.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.map", "title": "NonEmptyF.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.join", "title": "NonEmptyF.join", "contents": "join t t t ", "rendered": "<h4 class='item'>let join: t(t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.flatten", "title": "NonEmptyF.flatten", "contents": "flatten t t t ", "rendered": "<h4 class='item'>let flatten: t(t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.foldRight", "title": "NonEmptyF.foldRight", "contents": "foldRight   t   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, t('a)) => 'b</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.foldLeft", "title": "NonEmptyF.foldLeft", "contents": "foldLeft   t   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, t('a)) => 'b</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.reduceLeft", "title": "NonEmptyF.reduceLeft", "contents": "reduceLeft   t  ", "rendered": "<h4 class='item'>let reduceLeft: (('a, 'a) => 'a, t('a)) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.concat", "title": "NonEmptyF.concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (t('a), t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.tail", "title": "NonEmptyF.tail", "contents": "tail t TailSequence t ", "rendered": "<h4 class='item'>let tail: t('a) => TailSequence.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.head", "title": "NonEmptyF.head", "contents": "head t ", "rendered": "<h4 class='item'>let head: t('a) => 'a</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.cons", "title": "NonEmptyF.cons", "contents": "cons t t  ", "rendered": "<h4 class='item'>let cons: ('a, t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.toSequence", "title": "NonEmptyF.toSequence", "contents": "toSequence t TailSequence t ", "rendered": "<h4 class='item'>let toSequence: t('a) => TailSequence.t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.fromSequence", "title": "NonEmptyF.fromSequence", "contents": "fromSequence TailSequence t option t ", "rendered": "<h4 class='item'>let fromSequence: TailSequence.t('a) => option(t('a))</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.make", "title": "NonEmptyF.make", "contents": "make TailSequence t t  ", "rendered": "<h4 class='item'>let make: ('a, TailSequence.t('a)) => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.pure", "title": "NonEmptyF.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#value-NonEmptyF.length", "title": "NonEmptyF.length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: t('a) => int</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#type-NonEmptyF.t", "title": "NonEmptyF.t", "contents": "t TailSequence t", "rendered": "<h4 class='item'>type t('a) = | NonEmpty('a, TailSequence.t('a))\n</h4>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF", "title": "NonEmptyF", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#module-NonEmptyF", "title": "NonEmptyF", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html", "title": "NonEmpty", "contents": "@rest", "rendered": "@rest", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html", "title": "NonEmpty", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "NonEmpty"},
{"href": "./api/NonEmpty.html#NonEmpty", "title": "NonEmpty", "contents": "", "rendered": "", "breadcrumb": "NonEmpty"},
{"href": "./api/MonadEff.html#value-MonadEffEff.liftEff", "title": "MonadEffEff.liftEff", "contents": "liftEff ", "rendered": "<h4 class='item'>let liftEff: 'a => 'a</h4>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#type-MonadEffEff.t", "title": "MonadEffEff.t", "contents": "t Relude Eff t", "rendered": "<h4 class='item'>type t('a) = Relude.Eff.t('a)</h4>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#module-MonadEffEff", "title": "MonadEffEff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#module-MonadEffEff", "title": "MonadEffEff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html", "title": "MonadEff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html", "title": "MonadEff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadEff"},
{"href": "./api/MonadEff.html#MonadEff", "title": "MonadEff", "contents": "", "rendered": "", "breadcrumb": "MonadEff"},
{"href": "./api/MonadAff.html#value-MonadAffAff.liftAff", "title": "MonadAffAff.liftAff", "contents": "liftAff ", "rendered": "<h4 class='item'>let liftAff: 'a => 'a</h4>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#type-MonadAffAff.t", "title": "MonadAffAff.t", "contents": "t Relude Aff t", "rendered": "<h4 class='item'>type t('a, 'e) = Relude.Aff.t('a, 'e)</h4>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#module-MonadAffAff", "title": "MonadAffAff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#module-MonadAffAff", "title": "MonadAffAff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html", "title": "MonadAff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html", "title": "MonadAff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MonadAff"},
{"href": "./api/MonadAff.html#MonadAff", "title": "MonadAff", "contents": "", "rendered": "", "breadcrumb": "MonadAff"},
{"href": "./api/ListF.html#value-Validation.traverse", "title": "Validation.traverse", "contents": "traverse Belt Result t  list Relude Validation t list Relude NonEmpty List t  ", "rendered": "<h4 class='item'>let traverse: (\n  'a => Belt.Result.t('a, 'a),\n  list('a)\n) => Relude.Validation.t(\n  list('a),\n  Relude.NonEmpty.List.t('a)\n)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Validation", "title": "Validation", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Validation", "title": "Validation", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Result.traverse", "title": "Result.traverse", "contents": "traverse Belt Result t  list Belt Result t list  ", "rendered": "<h4 class='item'>let traverse: (\n  'a => Belt.Result.t('a, 'a),\n  list('a)\n) => Belt.Result.t(list('a), 'a)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Result", "title": "Result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Result", "title": "Result", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Option.sequence", "title": "Option.sequence", "contents": "sequence list option option list ", "rendered": "<h4 class='item'>let sequence: list(option('a)) => option(list('a))</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#value-Option.traverse", "title": "Option.traverse", "contents": "traverse option  list option list  ", "rendered": "<h4 class='item'>let traverse: ('a => option('a), list('a)) => option(\n  list('a)\n)</h4>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Option", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#module-Option", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html", "title": "ListF", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListF"},
{"href": "./api/ListF.html", "title": "ListF", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "ListF"},
{"href": "./api/ListF.html#ListF", "title": "ListF", "contents": "", "rendered": "", "breadcrumb": "ListF"},
{"href": "./api/List.html#value-Infix.*>", "title": "Infix.*>", "contents": "*> Apply t Apply t Apply t  ", "rendered": "<h4 class='item'>let *>: (<a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a), <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<*", "title": "Infix.<*", "contents": "<* Apply t Apply t Apply t  ", "rendered": "<h4 class='item'>let <*: (<a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a), <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/List.html#module-Apply\">Apply</a>.<a href=\"./api/List.html#type-Apply.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> BsAbstract List Alternative t  BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <*>: (\n  BsAbstract.List.Alternative.t('a => 'a),\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> BsAbstract List Alternative t  BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <#>: (\n  BsAbstract.List.Alternative.t('a),\n  'a => 'a\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <$>: (\n  'a => 'a,\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<|>", "title": "Infix.<|>", "contents": "<|> BsAbstract List Alternative t BsAbstract List Alternative t BsAbstract List Alternative t  ", "rendered": "<h4 class='item'>let <|>: (\n  BsAbstract.List.Alternative.t('a),\n  BsAbstract.List.Alternative.t(\n    'a\n  )\n) => BsAbstract.List.Alternative.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< BsAbstract List Monad t  BsAbstract List Monad t  BsAbstract List Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t('a),\n  'a\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> BsAbstract List Monad t  BsAbstract List Monad t  BsAbstract List Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t('a),\n  'a\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< BsAbstract List Monad t  BsAbstract List Monad t BsAbstract List Monad t  ", "rendered": "<h4 class='item'>let =<<: (\n  'a => BsAbstract.List.Monad.t('a),\n  BsAbstract.List.Monad.t('a)\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= BsAbstract List Monad t BsAbstract List Monad t  BsAbstract List Monad t  ", "rendered": "<h4 class='item'>let >>=: (\n  BsAbstract.List.Monad.t('a),\n  'a => BsAbstract.List.Monad.t(\n    'a\n  )\n) => BsAbstract.List.Monad.t('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-IsoArray.toArray", "title": "IsoArray.toArray", "contents": "toArray list array ", "rendered": "<h4 class='item'>let toArray: list('a) => array('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-IsoArray.fromArray", "title": "IsoArray.fromArray", "contents": "fromArray array list ", "rendered": "<h4 class='item'>let fromArray: array('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-IsoArray.t", "title": "IsoArray.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-IsoArray", "title": "IsoArray", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-IsoArray", "title": "IsoArray", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.tailOrEmpty", "title": "Sequence.tailOrEmpty", "contents": "tailOrEmpty list list ", "rendered": "<h4 class='item'>let tailOrEmpty: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.tail", "title": "Sequence.tail", "contents": "tail list option list ", "rendered": "<h4 class='item'>let tail: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.head", "title": "Sequence.head", "contents": "head list option ", "rendered": "<h4 class='item'>let head: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.isNotEmpty", "title": "Sequence.isNotEmpty", "contents": "isNotEmpty list bool ", "rendered": "<h4 class='item'>let isNotEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.isEmpty", "title": "Sequence.isEmpty", "contents": "isEmpty list bool ", "rendered": "<h4 class='item'>let isEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-Sequence.length", "title": "Sequence.length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-Sequence.t", "title": "Sequence.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-Sequence", "title": "Sequence", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-Sequence", "title": "Sequence", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map5", "title": "map5", "contents": "map5      list list list list list list      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  list('a),\n  list('b),\n  list('c),\n  list('d),\n  list('e)\n) => list('f)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map4", "title": "map4", "contents": "map4     list list list list list     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  list('a),\n  list('b),\n  list('c),\n  list('d)\n) => list('e)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map3", "title": "map3", "contents": "map3    list list list list    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  list('a),\n  list('b),\n  list('c)\n) => list('d)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map2", "title": "map2", "contents": "map2   list list list   ", "rendered": "<h4 class='item'>let map2: (('a, 'b) => 'c, list('a), list('b)) => list('c)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flap", "title": "flap", "contents": "flap list  list  ", "rendered": "<h4 class='item'>let flap: (list('a => 'b), 'a) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-void", "title": "void", "contents": "void list list unit ", "rendered": "<h4 class='item'>let void: list('a) => list(unit)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-MonoidAny.empty", "title": "MonoidAny.empty", "contents": "empty list", "rendered": "<h4 class='item'>let empty: list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-MonoidAny.append", "title": "MonoidAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a), <a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a)) => <a href=\"./api/List.html#type-MonoidAny.t\">t</a>('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-MonoidAny.t", "title": "MonoidAny.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-MonoidAny", "title": "MonoidAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-SemigroupAny.append", "title": "SemigroupAny.append", "contents": "append list list list  ", "rendered": "<h4 class='item'>let append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#type-SemigroupAny.t", "title": "SemigroupAny.t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#value-show", "title": "show", "contents": "show string  list string  ", "rendered": "<h4 class='item'>let show: ('a => string, list('a)) => string</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mkString", "title": "mkString", "contents": "mkString string list string string  ", "rendered": "<h4 class='item'>let mkString: (string, list(string)) => string</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-eqM", "title": "eqM", "contents": "eqM list list bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'c),\n  list('a),\n  list('a)\n) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-eq", "title": "eq", "contents": "eq bool   list list bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, list('a), list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-toArray", "title": "toArray", "contents": "toArray list array ", "rendered": "<h4 class='item'>let toArray: list('a) => array('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-fromArray", "title": "fromArray", "contents": "fromArray array list ", "rendered": "<h4 class='item'>let fromArray: array('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatten", "title": "flatten", "contents": "flatten list list list ", "rendered": "<h4 class='item'>let flatten: list(list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap list  list list  ", "rendered": "<h4 class='item'>let flipFlatMap: ('a => list('b), list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatMap", "title": "flatMap", "contents": "flatMap list list  list  ", "rendered": "<h4 class='item'>let flatMap: (list('a), 'a => list('b)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-apply", "title": "apply", "contents": "apply list  list list  ", "rendered": "<h4 class='item'>let apply: (list('a => 'b), list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex int int unit   list int unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (\n  (int, int) => unit,\n  list(int)\n) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-forEach", "title": "forEach", "contents": "forEach unit  list unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, list('a)) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex int int   list int list  ", "rendered": "<h4 class='item'>let mapWithIndex: ((int, int) => 'b, list(int)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map", "title": "map", "contents": "map  list list  ", "rendered": "<h4 class='item'>let map: ('a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-distinct", "title": "distinct", "contents": "distinct bool   list list  ", "rendered": "<h4 class='item'>let distinct: (('a, 'a) => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-all", "title": "all", "contents": "all bool  list bool  ", "rendered": "<h4 class='item'>let all: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-contains", "title": "contains", "contents": "contains bool   list bool   ", "rendered": "<h4 class='item'>let contains: (('a, 'a) => bool, 'a, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-any", "title": "any", "contents": "any bool  list bool  ", "rendered": "<h4 class='item'>let any: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-reverse", "title": "reverse", "contents": "reverse list list ", "rendered": "<h4 class='item'>let reverse: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-shuffle", "title": "shuffle", "contents": "shuffle list list ", "rendered": "<h4 class='item'>let shuffle: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort", "title": "sort", "contents": "sort BsAbstract Interface ordering   list list  ", "rendered": "<h4 class='item'>let sort: (\n  ('a, 'a) => BsAbstract.Interface.ordering,\n  list('a)\n) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sortWithInt", "title": "sortWithInt", "contents": "sortWithInt int   list list  ", "rendered": "<h4 class='item'>let sortWithInt: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-unzip", "title": "unzip", "contents": "unzip list list list ", "rendered": "<h4 class='item'>let unzip: list(('a, 'b)) => (list('a), list('b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zipWithIndex", "title": "zipWithIndex", "contents": "zipWithIndex list list int ", "rendered": "<h4 class='item'>let zipWithIndex: list('a) => list(('a, int))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zipWith", "title": "zipWith", "contents": "zipWith   list list list   ", "rendered": "<h4 class='item'>let zipWith: (('a, 'b) => 'c, list('a), list('b)) => list(\n  'c\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-zip", "title": "zip", "contents": "zip list list list  ", "rendered": "<h4 class='item'>let zip: (list('a), list('b)) => list(('a, 'b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-replicate", "title": "replicate", "contents": "replicate int list list  ", "rendered": "<h4 class='item'>let replicate: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-intersperse", "title": "intersperse", "contents": "intersperse list list  ", "rendered": "<h4 class='item'>let intersperse: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-prependToAll", "title": "prependToAll", "contents": "prependToAll list list  ", "rendered": "<h4 class='item'>let prependToAll: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-splitAt", "title": "splitAt", "contents": "splitAt int list option list list  ", "rendered": "<h4 class='item'>let splitAt: (int, list('a)) => option((list('a), list('a)))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-partition", "title": "partition", "contents": "partition bool  list list list  ", "rendered": "<h4 class='item'>let partition: ('a => bool, list('a)) => (\n  list('a),\n  list('a)\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-findWithIndex", "title": "findWithIndex", "contents": "findWithIndex int bool   list option  ", "rendered": "<h4 class='item'>let findWithIndex: (('a, int) => bool, list('a)) => option(\n  'a\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-find", "title": "find", "contents": "find bool  list option  ", "rendered": "<h4 class='item'>let find: ('a => bool, list('a)) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-filterWithIndex", "title": "filterWithIndex", "contents": "filterWithIndex int bool   list list  ", "rendered": "<h4 class='item'>let filterWithIndex: (('a, int) => bool, list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-filter", "title": "filter", "contents": "filter bool  list list  ", "rendered": "<h4 class='item'>let filter: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-dropWhile", "title": "dropWhile", "contents": "dropWhile bool  list list  ", "rendered": "<h4 class='item'>let dropWhile: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-dropUpTo", "title": "dropUpTo", "contents": "dropUpTo int list list  ", "rendered": "<h4 class='item'>let dropUpTo: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-drop", "title": "drop", "contents": "drop int list option list  ", "rendered": "<h4 class='item'>let drop: (int, list('a)) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-takeWhile", "title": "takeWhile", "contents": "takeWhile bool  list list  ", "rendered": "<h4 class='item'>let takeWhile: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-takeUpTo", "title": "takeUpTo", "contents": "takeUpTo int list list  ", "rendered": "<h4 class='item'>let takeUpTo: (int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-take", "title": "take", "contents": "take int list option list  ", "rendered": "<h4 class='item'>let take: (int, list('a)) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-last", "title": "last", "contents": "last list option ", "rendered": "<h4 class='item'>let last: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-init", "title": "init", "contents": "init list option list ", "rendered": "<h4 class='item'>let init: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-tailOrEmpty", "title": "tailOrEmpty", "contents": "tailOrEmpty list list ", "rendered": "<h4 class='item'>let tailOrEmpty: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-tail", "title": "tail", "contents": "tail list option list ", "rendered": "<h4 class='item'>let tail: list('a) => option(list('a))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-head", "title": "head", "contents": "head list option ", "rendered": "<h4 class='item'>let head: list('a) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-get", "title": "get", "contents": "get int list option  ", "rendered": "<h4 class='item'>let get: (int, list('a)) => option('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-scanRight", "title": "scanRight", "contents": "scanRight   list list   ", "rendered": "<h4 class='item'>let scanRight: (('a, 'b) => 'b, 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-scanLeft", "title": "scanLeft", "contents": "scanLeft   list list   ", "rendered": "<h4 class='item'>let scanLeft: (('b, 'a) => 'b, 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-foldRight", "title": "foldRight", "contents": "foldRight   list   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, list('a)) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   list   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, list('a)) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-append", "title": "append", "contents": "append list list  ", "rendered": "<h4 class='item'>let append: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-prepend", "title": "prepend", "contents": "prepend list list  ", "rendered": "<h4 class='item'>let prepend: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-uncons", "title": "uncons", "contents": "uncons list option list ", "rendered": "<h4 class='item'>let uncons: list('a) => option(('a, list('a)))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-cons", "title": "cons", "contents": "cons list list  ", "rendered": "<h4 class='item'>let cons: ('a, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-concat", "title": "concat", "contents": "concat list list list  ", "rendered": "<h4 class='item'>let concat: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-makeWithIndex", "title": "makeWithIndex", "contents": "makeWithIndex int int  list  ", "rendered": "<h4 class='item'>let makeWithIndex: (int, int => 'a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-repeat", "title": "repeat", "contents": "repeat int list  ", "rendered": "<h4 class='item'>let repeat: (int, 'a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-one", "title": "one", "contents": "one list ", "rendered": "<h4 class='item'>let one: 'a => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-pure", "title": "pure", "contents": "pure list ", "rendered": "<h4 class='item'>let pure: 'a => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-empty", "title": "empty", "contents": "empty list", "rendered": "<h4 class='item'>let empty: list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty list bool ", "rendered": "<h4 class='item'>let isNotEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty list bool ", "rendered": "<h4 class='item'>let isEmpty: list('a) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-length", "title": "length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "List"},
{"href": "./api/List.html#List", "title": "List", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/Interface.html", "title": "Interface", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Interface"},
{"href": "./api/Interface.html", "title": "Interface", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Interface"},
{"href": "./api/Interface.html#Interface", "title": "Interface", "contents": "", "rendered": "", "breadcrumb": "Interface"},
{"href": "./api/Int.html#value-compareAsInt", "title": "compareAsInt", "contents": "compareAsInt int int int  ", "rendered": "<h4 class='item'>let compareAsInt: (int, int) => int</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-compare", "title": "compare", "contents": "compare int int ordering  ", "rendered": "<h4 class='item'>let compare: (int, int) => <a href=\"./api/Int.html#type-ordering\">ordering</a></h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-eq", "title": "eq", "contents": "eq int int bool  ", "rendered": "<h4 class='item'>let eq: (int, int) => bool</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-rangeAsArray", "title": "rangeAsArray", "contents": "rangeAsArray int int array int  ", "rendered": "<h4 class='item'>let rangeAsArray: (int, int) => array(int)</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#value-rangeAsList", "title": "rangeAsList", "contents": "rangeAsList int int list int  ", "rendered": "<h4 class='item'>let rangeAsList: (int, int) => list(int)</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html#type-ordering", "title": "ordering", "contents": "ordering BsAbstract Interface ordering", "rendered": "<h4 class='item'>type ordering = BsAbstract.Interface.ordering</h4>", "breadcrumb": "Int"},
{"href": "./api/Int.html", "title": "Int", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Int"},
{"href": "./api/Int.html", "title": "Int", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Int"},
{"href": "./api/Int.html#Int", "title": "Int", "contents": "", "rendered": "", "breadcrumb": "Int"},
{"href": "./api/Function.html#value-Infix.>>", "title": "Infix.>>", "contents": ">>     ", "rendered": "<h4 class='item'>let >>: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-Infix.<<", "title": "Infix.<<", "contents": "<<     ", "rendered": "<h4 class='item'>let <<: ('a => 'a, 'a => 'a, 'a) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Function"},
{"href": "./api/Function.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flatMap", "title": "flatMap", "contents": "flatMap      ", "rendered": "<h4 class='item'>let flatMap: ('r => 'a, ('a, 'r) => 'b, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-apply", "title": "apply", "contents": "apply      ", "rendered": "<h4 class='item'>let apply: (('r, 'a) => 'b, 'r => 'a, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-map", "title": "map", "contents": "map     ", "rendered": "<h4 class='item'>let map: ('a => 'b, 'r => 'a, 'r) => 'b</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-pure", "title": "pure", "contents": "pure  ", "rendered": "<h4 class='item'>let pure: ('a, 'r) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-andThen", "title": "andThen", "contents": "andThen     ", "rendered": "<h4 class='item'>let andThen: ('a => 'b, 'b => 'c, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flipCompose", "title": "flipCompose", "contents": "flipCompose     ", "rendered": "<h4 class='item'>let flipCompose: ('a => 'b, 'b => 'c, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-compose", "title": "compose", "contents": "compose     ", "rendered": "<h4 class='item'>let compose: ('b => 'c, 'a => 'b, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-flip", "title": "flip", "contents": "flip     ", "rendered": "<h4 class='item'>let flip: (('a, 'b) => 'c, 'b, 'a) => 'c</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-const", "title": "const", "contents": "const  ", "rendered": "<h4 class='item'>let const: ('a, 'b) => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-id", "title": "id", "contents": "id ", "rendered": "<h4 class='item'>let id: 'a => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html#value-identity", "title": "identity", "contents": "identity ", "rendered": "<h4 class='item'>let identity: 'a => 'a</h4>", "breadcrumb": "Function"},
{"href": "./api/Function.html", "title": "Function", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Function"},
{"href": "./api/Function.html", "title": "Function", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Function"},
{"href": "./api/Function.html#Function", "title": "Function", "contents": "", "rendered": "", "breadcrumb": "Function"},
{"href": "./api/Float.html#value-approximatelyEqual", "title": "approximatelyEqual", "contents": "approximatelyEqual float float float bool tolerance  ", "rendered": "<h4 class='item'>let approximatelyEqual: (\n  ~tolerance: float,\n  float,\n  float\n) => bool</h4>", "breadcrumb": "Float"},
{"href": "./api/Float.html", "title": "Float", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Float"},
{"href": "./api/Float.html", "title": "Float", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Float"},
{"href": "./api/Float.html#Float", "title": "Float", "contents": "", "rendered": "", "breadcrumb": "Float"},
{"href": "./api/Eff.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a\n) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a),\n  'a\n) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), 'a => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a => 'a), <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (<a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a), 'a => 'a) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#module-Monad\">Monad</a>.<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/Eff.html#type-t\">t</a>('a), 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-Monad.t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Monad.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Monad.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Monad.t", "title": "Monad.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Applicative.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-t\">t</a>('a => 'a), <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-Apply.t\">t</a>('a)) => <a href=\"./api/Eff.html#type-Apply.t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Apply.t", "title": "Apply.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-Functor.t", "title": "Functor.t", "contents": "t t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Eff.html#type-t\">t</a>('a), 'a => <a href=\"./api/Eff.html#type-t\">t</a>('b)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Eff.html#type-t\">t</a>('a => 'b), <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Eff.html#type-t\">t</a>('a)) => <a href=\"./api/Eff.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-attemptJS", "title": "attemptJS", "contents": "attemptJS t t Belt Result t Js Exn t ", "rendered": "<h4 class='item'>let attemptJS: <a href=\"./api/Eff.html#type-t\">t</a>('a) => <a href=\"./api/Eff.html#type-t\">t</a>(Belt.Result.t('a, Js.Exn.t))</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-fromThunk", "title": "fromThunk", "contents": "fromThunk unit  t ", "rendered": "<h4 class='item'>let fromThunk: unit => 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Eff.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-run", "title": "run", "contents": "Unsafely runs the effect or chain of effects. For Eff, this is the same as\njust calling the effect as a function. If any of the thunks throw an\nexception, the exception will not be caught here.", "rendered": "Unsafely runs the effect or chain of effects. For Eff, this is the same as\njust calling the effect as a function. If any of the thunks throw an\nexception, the exception will not be caught here.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#value-run", "title": "run", "contents": "run t ", "rendered": "<h4 class='item'>let run: <a href=\"./api/Eff.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "If your action can fail, you should use Aff instead.", "rendered": "If your action can fail, you should use Aff instead.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "console.log is a good example of a function that can be wrapped in Eff - it\nis purely synchronous and is not likely to ever fail with an exception.\nCertain DOM functions might also work well with Eff - the key is that Eff\ncannot deal with errors nor exceptions.", "rendered": "console.log is a good example of a function that can be wrapped in Eff - it\nis purely synchronous and is not likely to ever fail with an exception.\nCertain DOM functions might also work well with Eff - the key is that Eff\ncannot deal with errors nor exceptions.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "Eff should be similar in spirit to the Eff type of purescript (minus the\neffect row) for encoding synchronous effects with no accomodation for errors.", "rendered": "Eff should be similar in spirit to the Eff type of purescript (minus the\neffect row) for encoding synchronous effects with no accomodation for errors.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "This is inspired by bs-effects Effect and John De Goes&#39; basic synchronous\nIO monad described here: http://degoes.net/articles/only-one-io", "rendered": "This is inspired by bs-effects <code>Effect</code> and John De Goes&#39; basic synchronous\nIO monad described here: http://degoes.net/articles/only-one-io", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "It&#39;s basically just a thunk or a lazy function that produces a value.\nLaziness is the key to achieving referential transparency and delaying side\neffects until the monadic chain is run by calling the effect with myEff()\nor equivalently myEff |&gt; Eff.run", "rendered": "It&#39;s basically just a thunk or a lazy function that produces a value.\nLaziness is the key to achieving referential transparency and delaying side\neffects until the monadic chain is run by calling the effect with <code>myEff()</code>\nor equivalently <code>myEff |&gt; Eff.run</code>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "Eff is a pure, lazy, synchronous effect monad that allows for chaining of\nsynchronous effectful functions that are not expected to fail.", "rendered": "Eff is a pure, lazy, synchronous effect monad that allows for chaining of\nsynchronous effectful functions that are not expected to fail.", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#type-t", "title": "t", "contents": "t unit ", "rendered": "<h4 class='item'>type t('a) = unit => 'a</h4>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html", "title": "Eff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Eff"},
{"href": "./api/Eff.html", "title": "Eff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Eff"},
{"href": "./api/Eff.html#Eff", "title": "Eff", "contents": "", "rendered": "", "breadcrumb": "Eff"},
{"href": "./api/Demo.html#value-log", "title": "log", "contents": "log unit  ", "rendered": "<h4 class='item'>let log: ((module ShowType with type t = 'b), 'a) => unit</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Logger.log", "title": "Logger.log", "contents": "log S t unit ", "rendered": "<h4 class='item'>let log: S.t => unit</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Logger", "title": "Logger", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Logger", "title": "Logger", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-IntShow.show", "title": "IntShow.show", "contents": "show int string ", "rendered": "<h4 class='item'>let show: int => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-IntShow.t", "title": "IntShow.t", "contents": "t int", "rendered": "<h4 class='item'>type t = int</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-IntShow", "title": "IntShow", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-IntShow", "title": "IntShow", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyFunctor.x", "title": "MyFunctor.x", "contents": "x bool", "rendered": "<h4 class='item'>let x: bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyFunctor", "title": "MyFunctor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyFunctor", "title": "MyFunctor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-myModuleAnon", "title": "myModuleAnon", "contents": "myModuleAnon ", "rendered": "<h4 class='item'>let myModuleAnon: (module MyModuleType)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyModule.f2", "title": "MyModule.f2", "contents": "f2 string ", "rendered": "<h4 class='item'>let f2: 'a => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyModule.f1", "title": "MyModule.f1", "contents": "f1 bool ", "rendered": "<h4 class='item'>let f1: 'a => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyModule", "title": "MyModule", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyModule", "title": "MyModule", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-y", "title": "y", "contents": "y string", "rendered": "<h4 class='item'>let y: string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-x", "title": "x", "contents": "x string", "rendered": "<h4 class='item'>let x: string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-MyPrinter.print", "title": "MyPrinter.print", "contents": "print S t string ", "rendered": "<h4 class='item'>let print: S.t => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyPrinter", "title": "MyPrinter", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-MyPrinter", "title": "MyPrinter", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Functor.map", "title": "Option.Functor.map", "contents": "map  option option  ", "rendered": "<h4 class='item'>let map: ('a => 'a, option('a)) => option('a)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Functor.t", "title": "Option.Functor.t", "contents": "t option", "rendered": "<h4 class='item'>type t('a) = option('a)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Functor", "title": "Option.Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Functor", "title": "Option.Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Eq.eq", "title": "Option.Eq.eq", "contents": "eq option E t option E t bool  ", "rendered": "<h4 class='item'>let eq: (option(E.t), option(E.t)) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Eq.t", "title": "Option.Eq.t", "contents": "t option E t", "rendered": "<h4 class='item'>type t = option(E.t)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Eq", "title": "Option.Eq", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Eq", "title": "Option.Eq", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Option.Show.show", "title": "Option.Show.show", "contents": "show option S t string ", "rendered": "<h4 class='item'>let show: option(S.t) => string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-Option.Show.t", "title": "Option.Show.t", "contents": "t option S t", "rendered": "<h4 class='item'>type t = option(S.t)</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Show", "title": "Option.Show", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option.Show", "title": "Option.Show", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option", "title": "Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Option", "title": "Option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Ord.compare", "title": "String.Ord.compare", "contents": "compare  ", "rendered": "<h4 class='item'>let compare: (\n  'a,\n  'a\n) => [&gt; `less_than | `greater_than | `equal_to ]</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Ord.eq", "title": "String.Ord.eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Demo.html#type-String.Ord.t\">t</a>, <a href=\"./api/Demo.html#type-String.Ord.t\">t</a>) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Ord.t", "title": "String.Ord.t", "contents": "t Eq t", "rendered": "<h4 class='item'>type t = <a href=\"./api/Demo.html#module-String.Eq\">Eq</a>.<a href=\"./api/Demo.html#type-String.Eq.t\">t</a></h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Ord", "title": "String.Ord", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Eq.eq", "title": "String.Eq.eq", "contents": "eq bool  ", "rendered": "<h4 class='item'>let eq: ('a, 'a) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Eq.t", "title": "String.Eq.t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Eq", "title": "String.Eq", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Eq", "title": "String.Eq", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-String.Show.show", "title": "String.Show.show", "contents": "show ", "rendered": "<h4 class='item'>let show: 'a => 'a</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-String.Show.t", "title": "String.Show.t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Show", "title": "String.Show", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String.Show", "title": "String.Show", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String", "title": "String", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-String", "title": "String", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.greaterThanOrEqual", "title": "Ordering.greaterThanOrEqual", "contents": "greaterThanOrEqual O t O t bool  ", "rendered": "<h4 class='item'>let greaterThanOrEqual: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.greaterThan", "title": "Ordering.greaterThan", "contents": "greaterThan O t O t bool  ", "rendered": "<h4 class='item'>let greaterThan: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.lessThanOrEqual", "title": "Ordering.lessThanOrEqual", "contents": "lessThanOrEqual O t O t bool  ", "rendered": "<h4 class='item'>let lessThanOrEqual: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#value-Ordering.lessThan", "title": "Ordering.lessThan", "contents": "lessThan O t O t bool  ", "rendered": "<h4 class='item'>let lessThan: (O.t, O.t) => bool</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Ordering", "title": "Ordering", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#module-Ordering", "title": "Ordering", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#type-ordering", "title": "ordering", "contents": "ordering ", "rendered": "<h4 class='item'>type ordering = [ `greater_than | `less_than | `equal_to ]</h4>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html", "title": "Demo", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Demo"},
{"href": "./api/Demo.html", "title": "Demo", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Demo"},
{"href": "./api/Demo.html#Demo", "title": "Demo", "contents": "", "rendered": "", "breadcrumb": "Demo"},
{"href": "./api/Bool.html#value-ifElse", "title": "ifElse", "contents": "ifElse unit  unit  bool   ", "rendered": "<h4 class='item'>let ifElse: (unit => 'a, unit => 'a, bool) => 'a</h4>", "breadcrumb": "Bool"},
{"href": "./api/Bool.html", "title": "Bool", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bool"},
{"href": "./api/Bool.html", "title": "Bool", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Bool"},
{"href": "./api/Bool.html#Bool", "title": "Bool", "contents": "", "rendered": "", "breadcrumb": "Bool"},
{"href": "./api/AsyncData.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a), 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Monad.t", "title": "Monad.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map5", "title": "map5", "contents": "map5      t t t t t t      ", "rendered": "<h4 class='item'>let map5: (\n  ('a, 'b, 'c, 'd, 'e) => 'f,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('e, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('f, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map4", "title": "map4", "contents": "map4     t t t t t     ", "rendered": "<h4 class='item'>let map4: (\n  ('a, 'b, 'c, 'd) => 'e,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('e, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map3", "title": "map3", "contents": "map3    t t t t    ", "rendered": "<h4 class='item'>let map3: (\n  ('a, 'b, 'c) => 'd,\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x),\n  <a href=\"./api/AsyncData.html#type-t\">t</a>('c, 'x)\n) => <a href=\"./api/AsyncData.html#type-t\">t</a>('d, 'x)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map2", "title": "map2", "contents": "map2   t t t   ", "rendered": "<h4 class='item'>let map2: (('a, 'b) => 'c, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'x), <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'x)) => <a href=\"./api/AsyncData.html#type-t\">t</a>(\n  'c,\n  'x\n)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a => 'a, 'a), <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Apply.t", "title": "Apply.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-Functor.t", "title": "Functor.t", "contents": "t t E t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/AsyncData.html#type-t\">t</a>('a, E.t)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/AsyncData.html#type-t\">t</a>('a => 'b, 'e), <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('e1 => 'e2, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e1)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e2)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/AsyncData.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-failed", "title": "failed", "contents": "failed t ", "rendered": "<h4 class='item'>let failed: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-refreshing", "title": "refreshing", "contents": "refreshing t ", "rendered": "<h4 class='item'>let refreshing: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-loaded", "title": "loaded", "contents": "loaded t ", "rendered": "<h4 class='item'>let loaded: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-loading", "title": "loading", "contents": "loading t", "rendered": "<h4 class='item'>let loading: <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-idle", "title": "idle", "contents": "idle t", "rendered": "<h4 class='item'>let idle: <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/AsyncData.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'e) = \n  | Idle\n  | Loading\n  | Loaded('a)\n  | Refreshing('a)\n  | Failed('e)\n</h4>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html", "title": "AsyncData", "contents": "@rest", "rendered": "@rest", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html", "title": "AsyncData", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "AsyncData"},
{"href": "./api/AsyncData.html#AsyncData", "title": "AsyncData", "contents": "", "rendered": "", "breadcrumb": "AsyncData"},
{"href": "./api/Array.html#value-IsoList.toList", "title": "IsoList.toList", "contents": "toList array list ", "rendered": "<h4 class='item'>let toList: array('a) => list('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-IsoList.fromList", "title": "IsoList.fromList", "contents": "fromList list array ", "rendered": "<h4 class='item'>let fromList: list('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-IsoList.t", "title": "IsoList.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-IsoList", "title": "IsoList", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-IsoList", "title": "IsoList", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.tailOrEmpty", "title": "Sequence.tailOrEmpty", "contents": "tailOrEmpty array array ", "rendered": "<h4 class='item'>let tailOrEmpty: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.tail", "title": "Sequence.tail", "contents": "tail array option array ", "rendered": "<h4 class='item'>let tail: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.head", "title": "Sequence.head", "contents": "head array option ", "rendered": "<h4 class='item'>let head: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.isNotEmpty", "title": "Sequence.isNotEmpty", "contents": "isNotEmpty array bool ", "rendered": "<h4 class='item'>let isNotEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.isEmpty", "title": "Sequence.isEmpty", "contents": "isEmpty array bool ", "rendered": "<h4 class='item'>let isEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-Sequence.length", "title": "Sequence.length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-Sequence.t", "title": "Sequence.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-Sequence", "title": "Sequence", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-Sequence", "title": "Sequence", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-MonoidAny.empty", "title": "MonoidAny.empty", "contents": "empty array", "rendered": "<h4 class='item'>let empty: array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-MonoidAny.append", "title": "MonoidAny.append", "contents": "append t t t  ", "rendered": "<h4 class='item'>let append: (<a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a), <a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a)) => <a href=\"./api/Array.html#type-MonoidAny.t\">t</a>('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-MonoidAny.t", "title": "MonoidAny.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-MonoidAny", "title": "MonoidAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-SemigroupAny.append", "title": "SemigroupAny.append", "contents": "append array array array  ", "rendered": "<h4 class='item'>let append: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#type-SemigroupAny.t", "title": "SemigroupAny.t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html#module-SemigroupAny", "title": "SemigroupAny", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-show", "title": "show", "contents": "show string  array string  ", "rendered": "<h4 class='item'>let show: ('a => string, array('a)) => string</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mkString", "title": "mkString", "contents": "mkString string array string string  ", "rendered": "<h4 class='item'>let mkString: (string, array(string)) => string</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-eqM", "title": "eqM", "contents": "eqM array array bool   ", "rendered": "<h4 class='item'>let eqM: (\n  (module BsAbstract.Interface.EQ with type t = 'a),\n  array('a),\n  array('a)\n) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-eq", "title": "eq", "contents": "eq bool   array array bool   ", "rendered": "<h4 class='item'>let eq: (('a, 'a) => bool, array('a), array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-toList", "title": "toList", "contents": "toList array list ", "rendered": "<h4 class='item'>let toList: array('a) => list('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fromList", "title": "fromList", "contents": "fromList list array ", "rendered": "<h4 class='item'>let fromList: list('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flatten", "title": "flatten", "contents": "flatten array array array ", "rendered": "<h4 class='item'>let flatten: array(array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flipFlatMap", "title": "flipFlatMap", "contents": "flipFlatMap array  array array  ", "rendered": "<h4 class='item'>let flipFlatMap: ('a => array('b), array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-flatMap", "title": "flatMap", "contents": "flatMap array array  array  ", "rendered": "<h4 class='item'>let flatMap: (array('a), 'a => array('b)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-apply", "title": "apply", "contents": "apply array  array array  ", "rendered": "<h4 class='item'>let apply: (array('a => 'b), array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex int int unit   array int unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (\n  (int, int) => unit,\n  array(int)\n) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-forEach", "title": "forEach", "contents": "forEach unit  array unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex int int   array int array  ", "rendered": "<h4 class='item'>let mapWithIndex: ((int, int) => 'b, array(int)) => array(\n  'b\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-map", "title": "map", "contents": "map  array array  ", "rendered": "<h4 class='item'>let map: ('a => 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-distinct", "title": "distinct", "contents": "distinct bool   array array  ", "rendered": "<h4 class='item'>let distinct: (('a, 'a) => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-all", "title": "all", "contents": "all bool  array bool  ", "rendered": "<h4 class='item'>let all: ('a => bool, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-contains", "title": "contains", "contents": "contains bool   array bool   ", "rendered": "<h4 class='item'>let contains: (('a, 'a) => bool, 'a, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-any", "title": "any", "contents": "any bool  array bool  ", "rendered": "<h4 class='item'>let any: ('a => bool, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-reverse", "title": "reverse", "contents": "reverse array array ", "rendered": "<h4 class='item'>let reverse: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-shuffleInPlace", "title": "shuffleInPlace", "contents": "shuffleInPlace array array ", "rendered": "<h4 class='item'>let shuffleInPlace: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "sort BsAbstract Interface ordering   array array  ", "rendered": "<h4 class='item'>let sort: (\n  ('a, 'a) => BsAbstract.Interface.ordering,\n  array('a)\n) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sortWithInt", "title": "sortWithInt", "contents": "sortWithInt int   array array  ", "rendered": "<h4 class='item'>let sortWithInt: (('a, 'a) => int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-unzip", "title": "unzip", "contents": "unzip array array array ", "rendered": "<h4 class='item'>let unzip: array(('a, 'b)) => (array('a), array('b))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zipWithIndex", "title": "zipWithIndex", "contents": "zipWithIndex array array int ", "rendered": "<h4 class='item'>let zipWithIndex: array('a) => array(('a, int))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zipWith", "title": "zipWith", "contents": "zipWith   array array array   ", "rendered": "<h4 class='item'>let zipWith: (\n  ('a, 'b) => 'c,\n  array('a),\n  array('b)\n) => array('c)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-zip", "title": "zip", "contents": "zip array array array  ", "rendered": "<h4 class='item'>let zip: (array('a), array('b)) => array(('a, 'b))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-replicate", "title": "replicate", "contents": "replicate int array array  ", "rendered": "<h4 class='item'>let replicate: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-intersperse", "title": "intersperse", "contents": "intersperse array array  ", "rendered": "<h4 class='item'>let intersperse: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-prependToAll", "title": "prependToAll", "contents": "prependToAll array array  ", "rendered": "<h4 class='item'>let prependToAll: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-splitAt", "title": "splitAt", "contents": "splitAt int array option array array  ", "rendered": "<h4 class='item'>let splitAt: (int, array('a)) => option(\n  (array('a), array('a))\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-partition", "title": "partition", "contents": "partition bool  array array array  ", "rendered": "<h4 class='item'>let partition: ('a => bool, array('a)) => (\n  array('a),\n  array('a)\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-findWithIndex", "title": "findWithIndex", "contents": "findWithIndex int bool   array option  ", "rendered": "<h4 class='item'>let findWithIndex: (('a, int) => bool, array('a)) => option(\n  'a\n)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-find", "title": "find", "contents": "find bool  array option  ", "rendered": "<h4 class='item'>let find: ('a => bool, array('a)) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-filterWithIndex", "title": "filterWithIndex", "contents": "filterWithIndex int bool   array array  ", "rendered": "<h4 class='item'>let filterWithIndex: (\n  ('a, int) => bool,\n  array('a)\n) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-filter", "title": "filter", "contents": "filter bool  array array  ", "rendered": "<h4 class='item'>let filter: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-dropWhile", "title": "dropWhile", "contents": "dropWhile bool  array array  ", "rendered": "<h4 class='item'>let dropWhile: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-dropUpTo", "title": "dropUpTo", "contents": "dropUpTo int array array  ", "rendered": "<h4 class='item'>let dropUpTo: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-drop", "title": "drop", "contents": "drop int array option array  ", "rendered": "<h4 class='item'>let drop: (int, array('a)) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-takeWhile", "title": "takeWhile", "contents": "takeWhile bool  array array  ", "rendered": "<h4 class='item'>let takeWhile: ('a => bool, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-takeUpTo", "title": "takeUpTo", "contents": "takeUpTo int array array  ", "rendered": "<h4 class='item'>let takeUpTo: (int, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-take", "title": "take", "contents": "take int array option array  ", "rendered": "<h4 class='item'>let take: (int, array('a)) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-last", "title": "last", "contents": "last array option ", "rendered": "<h4 class='item'>let last: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-init", "title": "init", "contents": "init array option array ", "rendered": "<h4 class='item'>let init: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-tailOrEmpty", "title": "tailOrEmpty", "contents": "tailOrEmpty array array ", "rendered": "<h4 class='item'>let tailOrEmpty: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-tail", "title": "tail", "contents": "tail array option array ", "rendered": "<h4 class='item'>let tail: array('a) => option(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-head", "title": "head", "contents": "head array option ", "rendered": "<h4 class='item'>let head: array('a) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-set", "title": "set", "contents": "set int array bool   ", "rendered": "<h4 class='item'>let set: (int, 'a, array('a)) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-get", "title": "get", "contents": "get int array option  ", "rendered": "<h4 class='item'>let get: (int, array('a)) => option('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-scanRight", "title": "scanRight", "contents": "scanRight   array array   ", "rendered": "<h4 class='item'>let scanRight: (('a, 'b) => 'b, 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-scanLeft", "title": "scanLeft", "contents": "scanLeft   array array   ", "rendered": "<h4 class='item'>let scanLeft: (('b, 'a) => 'b, 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-foldRight", "title": "foldRight", "contents": "foldRight   array   ", "rendered": "<h4 class='item'>let foldRight: (('a, 'b) => 'b, 'b, array('a)) => 'b</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft   array   ", "rendered": "<h4 class='item'>let foldLeft: (('b, 'a) => 'b, 'b, array('a)) => 'b</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-append", "title": "append", "contents": "append array array  ", "rendered": "<h4 class='item'>let append: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-prepend", "title": "prepend", "contents": "prepend array array  ", "rendered": "<h4 class='item'>let prepend: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-uncons", "title": "uncons", "contents": "uncons array option array ", "rendered": "<h4 class='item'>let uncons: array('a) => option(('a, array('a)))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-cons", "title": "cons", "contents": "cons array array  ", "rendered": "<h4 class='item'>let cons: ('a, array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-concat", "title": "concat", "contents": "concat array array array  ", "rendered": "<h4 class='item'>let concat: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-makeWithIndex", "title": "makeWithIndex", "contents": "makeWithIndex int int  array  ", "rendered": "<h4 class='item'>let makeWithIndex: (int, int => 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-repeat", "title": "repeat", "contents": "repeat int array  ", "rendered": "<h4 class='item'>let repeat: (int, 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-one", "title": "one", "contents": "one array ", "rendered": "<h4 class='item'>let one: 'a => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-pure", "title": "pure", "contents": "pure array ", "rendered": "<h4 class='item'>let pure: 'a => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-empty", "title": "empty", "contents": "empty array", "rendered": "<h4 class='item'>let empty: array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-isNotEmpty", "title": "isNotEmpty", "contents": "isNotEmpty array bool ", "rendered": "<h4 class='item'>let isNotEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty array bool ", "rendered": "<h4 class='item'>let isEmpty: array('a) => bool</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Array"},
{"href": "./api/Array.html#Array", "title": "Array", "contents": "", "rendered": "", "breadcrumb": "Array"},
{"href": "./api/Aff.html#value-InfixJsExn.<=<", "title": "InfixJsExn.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.>=>", "title": "InfixJsExn.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.=<<", "title": "InfixJsExn.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => Monad.t('a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.>>=", "title": "InfixJsExn.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (Monad.t('a), 'a => Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<*>", "title": "InfixJsExn.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (Monad.t('a => 'a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<#>", "title": "InfixJsExn.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (Monad.t('a), 'a => 'a) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.<$>", "title": "InfixJsExn.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.flat_map", "title": "InfixJsExn.Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (t('a), 'a => t('b)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.pure", "title": "InfixJsExn.Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.apply", "title": "InfixJsExn.Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-InfixJsExn.Monad.map", "title": "InfixJsExn.Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-InfixJsExn.Monad.t", "title": "InfixJsExn.Monad.t", "contents": "t t JsExnType t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, <a href=\"./api/Aff.html#module-InfixJsExn.JsExnType\">JsExnType</a>.<a href=\"./api/Aff.html#type-InfixJsExn.JsExnType.t\">t</a>)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.Monad", "title": "InfixJsExn.Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.Monad", "title": "InfixJsExn.Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-InfixJsExn.JsExnType.t", "title": "InfixJsExn.JsExnType.t", "contents": "t Js Exn t", "rendered": "<h4 class='item'>type t = Js.Exn.t</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.JsExnType", "title": "InfixJsExn.JsExnType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn.JsExnType", "title": "InfixJsExn.JsExnType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-InfixJsExn", "title": "InfixJsExn", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<=<", "title": "Infix.<=<", "contents": "<=< Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let <=<: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.>=>", "title": "Infix.>=>", "contents": ">=> Monad t  Monad t  Monad t   ", "rendered": "<h4 class='item'>let >=>: (\n  'a => Monad.t('a),\n  'a => Monad.t('a),\n  'a\n) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.=<<", "title": "Infix.=<<", "contents": "=<< Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let =<<: ('a => Monad.t('a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.>>=", "title": "Infix.>>=", "contents": ">>= Monad t Monad t  Monad t  ", "rendered": "<h4 class='item'>let >>=: (Monad.t('a), 'a => Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<*>", "title": "Infix.<*>", "contents": "<*> Monad t  Monad t Monad t  ", "rendered": "<h4 class='item'>let <*>: (Monad.t('a => 'a), Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<#>", "title": "Infix.<#>", "contents": "<#> Monad t  Monad t  ", "rendered": "<h4 class='item'>let <#>: (Monad.t('a), 'a => 'a) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Infix.<$>", "title": "Infix.<$>", "contents": "<$>  Monad t Monad t  ", "rendered": "<h4 class='item'>let <$>: ('a => 'a, Monad.t('a)) => Monad.t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Infix", "title": "Infix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.flat_map", "title": "Monad.flat_map", "contents": "flat_map t t  t  ", "rendered": "<h4 class='item'>let flat_map: (<a href=\"./api/Aff.html#type-t\">t</a>('a, 'a), 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.pure", "title": "Monad.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => t('a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.apply", "title": "Monad.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Monad.map", "title": "Monad.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Monad.t", "title": "Monad.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Monad", "title": "Monad", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.pure", "title": "Applicative.pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.apply", "title": "Applicative.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (t('a => 'b), t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Applicative.map", "title": "Applicative.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Applicative.t", "title": "Applicative.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Applicative", "title": "Applicative", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Apply.apply", "title": "Apply.apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Aff.html#type-t\">t</a>('a => 'a, 'a), <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Apply.map", "title": "Apply.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, t('a)) => t('b)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Apply.t", "title": "Apply.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Apply", "title": "Apply", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-Functor.map", "title": "Functor.map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'a, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-Functor.t", "title": "Functor.t", "contents": "t t Error t", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Aff.html#type-t\">t</a>('a, Error.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Functor", "title": "Functor", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#module-Functor", "title": "Functor", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-flatMap", "title": "flatMap", "contents": "flatMap t t  t  ", "rendered": "<h4 class='item'>let flatMap: (<a href=\"./api/Aff.html#type-t\">t</a>('a, 'e), 'a => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-apply", "title": "apply", "contents": "apply t  t t  ", "rendered": "<h4 class='item'>let apply: (<a href=\"./api/Aff.html#type-t\">t</a>('a => 'b, 'e), <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-voidError", "title": "voidError", "contents": "voidError t t unit ", "rendered": "<h4 class='item'>let voidError: <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e1) => <a href=\"./api/Aff.html#type-t\">t</a>('a, unit)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-mapError", "title": "mapError", "contents": "mapError  t t  ", "rendered": "<h4 class='item'>let mapError: ('e1 => 'e2, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e1)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e2)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)) => <a href=\"./api/Aff.html#type-t\">t</a>('b, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromEffAttemptJS", "title": "fromEffAttemptJS", "contents": "fromEffAttemptJS Relude Eff t Belt Result t Js Exn t t Js Exn t ", "rendered": "<h4 class='item'>let fromEffAttemptJS: Relude.Eff.t(\n  Belt.Result.t('a, Js.Exn.t)\n) => <a href=\"./api/Aff.html#type-t\">t</a>('a, Js.Exn.t)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromEff", "title": "fromEff", "contents": "fromEff Relude Eff t t ", "rendered": "<h4 class='item'>let fromEff: Relude.Eff.t('a) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromResult", "title": "fromResult", "contents": "fromResult Belt Result t t ", "rendered": "<h4 class='item'>let fromResult: Belt.Result.t('a, 'e) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-fromOption", "title": "fromOption", "contents": "fromOption option t  ", "rendered": "<h4 class='item'>let fromOption: ('e, option('a)) => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-error", "title": "error", "contents": "error t ", "rendered": "<h4 class='item'>let error: 'e => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-ok", "title": "ok", "contents": "ok t ", "rendered": "<h4 class='item'>let ok: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-pure", "title": "pure", "contents": "pure t ", "rendered": "<h4 class='item'>let pure: 'a => <a href=\"./api/Aff.html#type-t\">t</a>('a, 'e)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#value-run", "title": "run", "contents": "run t unit unit ", "rendered": "<h4 class='item'>let run: <a href=\"./api/Aff.html#type-t\">t</a>(unit, 'e) => unit</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#type-t", "title": "t", "contents": "t Belt Result t Relude Eff t unit  Relude Eff t unit ", "rendered": "<h4 class='item'>type t('a, 'e) = Belt.Result.t('a, 'e) => Relude.Eff.t(\n  unit\n) => Relude.Eff.t(unit)</h4>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html", "title": "Aff", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Aff"},
{"href": "./api/Aff.html", "title": "Aff", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Aff"},
{"href": "./api/Aff.html#Aff", "title": "Aff", "contents": "", "rendered": "", "breadcrumb": "Aff"}]