module Monoid = BsAbstract.String.Monoid;
module Semigroup = BsAbstract.String.Semigroup;
module Eq = BsAbstract.String.Eq;
module Ord = BsAbstract.String.Ord;
let concat: (string, string) => string;
let concatArray: array(string) => string;
let length: string => int;
let trim: string => string;
let isEmpty: string => bool;
let isNotEmpty: string => bool;
let toNonEmpty: string => option(string);
let eq: (string, string) => bool;
let isWhitespace: string => bool;
let toNonWhitespace: string => option(string);
let make: 'a => string;
let fromCharCode: int => string;
let makeWithIndex: (int, int => string) => string;
let repeat: (int, string) => string;
let toUpperCase: string => string;
let toLowerCase: string => string;
let charAt: (int, string) => option(string);
let charAtNullable: (int, string) => Js.Nullable.t(string);
let charAtOrThrow: (int, string) => string;
let toList: string => list(string);
let toArray: string => array(string);
let foldLeft: (('b, string) => 'b, 'b, string) => 'b;
let foldRight: ((string, 'b) => 'b, 'b, string) => 'b;
let endsWith: (string, string) => bool;
let startsWith: (string, string) => bool;
let contains: (string, string) => bool;
let indexOf: (string, string) => option(int);
let lastIndexOf: (string, string) => option(int);
let slice: (int, int, string) => string;
let sliceToEnd: (int, string) => string;
let splitArray: (string, string) => array(string);
let splitList: (string, string) => list(string);
let splitAt: (int, string) => (string, string);
let mapChars: (string => string, string) => string;
let replaceFirst: (string, string, string) => string;
let replaceEach: (string, string, string) => string;
let replaceRegex: (Js.Re.t, string, string) => string;
let removeFirst: (string, string) => string;
let removeEach: (string, string) => string;
let fromInt: int => string;
let toInt: string => option(int);
let fromFloat: float => string;
let toFloat: string => option(float);
