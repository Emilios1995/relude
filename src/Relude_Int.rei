module Ordering = Relude_Ordering;
type ordering = BsAbstract.Interface.ordering;
let min: (int, int) => int;
let max: (int, int) => int;
let rangeAsList: (int, int) => list(int);
let rangeAsArray: (int, int) => array(int);
let eq: (int, int) => bool;
let compare: (int, int) => ordering;
let compareAsInt: (int, int) => int;
let toString: int => string;
let fromString: string => option(int);
module Additive = BsAbstract.Int.Additive;
module Multiplicative = BsAbstract.Int.Multiplicative;
module Subtractive = BsAbstract.Int.Subtractive;
module Divisive = BsAbstract.Int.Divisive;
module Eq = BsAbstract.Int.Eq;
module Ord = BsAbstract.Int.Ord;
module Show = BsAbstract.Int.Show;
module Infix = BsAbstract.Int.Infix;
